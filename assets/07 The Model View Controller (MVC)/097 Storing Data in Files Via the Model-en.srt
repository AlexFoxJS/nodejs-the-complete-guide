1
00:00:02,470 --> 00:00:08,440
So let's make sure we can save our product to a file and not to does it read here anymore.

2
00:00:09,380 --> 00:00:13,520
For this when we call safe here I want to save it to a file.

3
00:00:13,550 --> 00:00:19,160
And of course in that file I want to have all products the old ones and the new one.

4
00:00:19,160 --> 00:00:22,590
So therefore First of all we need to be able to work with the file system.

5
00:00:22,640 --> 00:00:27,420
So I will import FS from the core FS module.

6
00:00:27,650 --> 00:00:35,810
Now that file should then also be created in special POF so it will use the path tool.

7
00:00:35,810 --> 00:00:40,890
The POF module to construct a path that works on all operating systems.

8
00:00:40,970 --> 00:00:48,650
Now here in save I will then create my POV and I will do that with Poth join.

9
00:00:48,650 --> 00:00:51,280
So using the POF core module.

10
00:00:51,700 --> 00:00:59,920
And I named this piece so that they avoid namespace clashes and the pop should be my root directory

11
00:01:00,090 --> 00:01:03,660
and we actually still have that helper function.

12
00:01:03,660 --> 00:01:10,860
But if you deleted it you can of course recreate it as we did before or simply copy this code here if

13
00:01:10,860 --> 00:01:11,690
you want.

14
00:01:12,770 --> 00:01:16,060
You also find it attached to this lecture again in case you deleted it.

15
00:01:16,370 --> 00:01:19,300
I will simply copy that logic here.

16
00:01:20,320 --> 00:01:21,000
And move it in there.

17
00:01:21,010 --> 00:01:29,270
But of course I could absolutely simply use my helper function I created there but this is of course

18
00:01:29,270 --> 00:01:31,340
just a root directory in there.

19
00:01:31,400 --> 00:01:38,450
I will have a new data folder and I will create it ahead of time so that we don't get permission issues.

20
00:01:39,000 --> 00:01:44,190
So I'll have added that data folder to the project folder and then that data Fuller I want to store

21
00:01:44,190 --> 00:01:45,160
my file.

22
00:01:45,330 --> 00:01:52,370
So that will then actually be a file and that should have a name of products and I will give design

23
00:01:52,490 --> 00:01:56,560
extensional Jason because I want to store my data in Jasen format.

24
00:01:56,790 --> 00:02:02,220
OK so that's products now to store a new product in there.

25
00:02:02,260 --> 00:02:07,300
First of all I need to get Dijk assisting array of products.

26
00:02:07,300 --> 00:02:10,360
So I will first of all read that file.

27
00:02:10,690 --> 00:02:17,200
So let's use F as read file and read the entire file content of a file.

28
00:02:17,350 --> 00:02:22,030
And by the way for very big files there are more efficient ways because you don't want to read them

29
00:02:22,150 --> 00:02:24,790
all into memory before you work with them.

30
00:02:24,820 --> 00:02:26,560
You can read them as a stream them.

31
00:02:26,560 --> 00:02:28,190
There is such a function.

32
00:02:28,360 --> 00:02:33,690
You can create a read stream with this function but we can read the entire file here does OK.

33
00:02:33,940 --> 00:02:39,400
And they will read the file at disport which is that fall I'm interested in.

34
00:02:39,400 --> 00:02:41,960
And then I will do something once I'm done reading it.

35
00:02:42,160 --> 00:02:47,890
And there we even get an error or we get data that we get the the file content.

36
00:02:47,890 --> 00:02:50,540
You could say that will be a buffer though.

37
00:02:51,470 --> 00:02:55,620
Now let's lock the file contents here.

38
00:02:56,410 --> 00:03:03,640
And let's see what we get if we now call save for go to add product and I'll type something here.

39
00:03:03,970 --> 00:03:15,980
It crashes and it trashes the scroll up because products is not the find and fetch all of course in

40
00:03:16,000 --> 00:03:21,080
save However it didn't throw an error but we get undefined here as you can see.

41
00:03:21,340 --> 00:03:25,650
And we did get undefined because this file simply doesn't exist.

42
00:03:25,650 --> 00:03:26,830
There is no content in it.

43
00:03:26,830 --> 00:03:32,280
Therefore you can see that here we've got no file with that name.

44
00:03:32,300 --> 00:03:34,940
So reading it therefore a kind of failed.

45
00:03:35,000 --> 00:03:39,120
And if I add an error here to print the error we get.

46
00:03:39,440 --> 00:03:40,970
And I tried it again.

47
00:03:41,270 --> 00:03:46,870
So let's go back to at product click that we scroll above this arrow message here you see does this

48
00:03:46,910 --> 00:03:47,630
error message.

49
00:03:47,660 --> 00:03:50,160
We're now logging with this line.

50
00:03:50,390 --> 00:03:52,520
And there we see no such file or directory.

51
00:03:52,580 --> 00:03:57,780
And that makes a lot of sense because indeed it does not exist as I just mentioned.

52
00:03:57,830 --> 00:04:06,830
So obviously if it doesn't exist then I also want to continue and I can I will simply check if we got

53
00:04:06,830 --> 00:04:09,250
an error and this will be NULL if we get none.

54
00:04:09,260 --> 00:04:15,650
But if we have one then I simply want to create a new empty array because we have no existing products

55
00:04:15,660 --> 00:04:16,460
chase and fall.

56
00:04:16,460 --> 00:04:23,990
So we got no old products stored and otherwise I'd want to use the existing one put in other words I'll

57
00:04:24,020 --> 00:04:29,500
add a new variable here which I'll name products.

58
00:04:29,710 --> 00:04:34,630
And initially this is an empty array and it will actually keep it as such if we do have an error.

59
00:04:34,930 --> 00:04:36,460
But if we get no error.

60
00:04:36,490 --> 00:04:38,520
And then we'll add an exclamation mark here.

61
00:04:38,530 --> 00:04:41,880
So if he got no error if this therefore is null.

62
00:04:41,870 --> 00:04:49,700
So if he got no error then I want to read the products from the file which I extracted.

63
00:04:49,890 --> 00:04:55,590
So therefore here I noted follow content will be something it should be the content of my file.

64
00:04:55,650 --> 00:05:01,410
And since that is adjacent file I will store it in Jason format there so then it will set products equal

65
00:05:01,410 --> 00:05:05,500
to Jason which is a helper object existing in vanilla node.

66
00:05:05,520 --> 00:05:08,170
JS So you don't need to find this on your own.

67
00:05:08,250 --> 00:05:15,210
And there we have the Parse method which takes incoming Jason and gives us back a javascript array or

68
00:05:15,210 --> 00:05:17,400
object or whatever is in the file.

69
00:05:17,670 --> 00:05:21,480
So here I can parse the file content and that should work.

70
00:05:21,900 --> 00:05:24,370
Or at least we should try that.

71
00:05:24,420 --> 00:05:29,910
So now I know that product will be an array either the one I read from the file or an empty one and

72
00:05:29,910 --> 00:05:33,110
therefore we can now append our new product there.

73
00:05:33,180 --> 00:05:41,400
Several called products Porsche and push my new product which is this onto it now important to ensure

74
00:05:41,700 --> 00:05:49,470
that this refers to the class you should use an aero function here because our wise this will lose its

75
00:05:49,470 --> 00:05:54,010
context and will not refer to declasse anymore.

76
00:05:54,050 --> 00:05:56,920
We have to set up though where I do use an aero function.

77
00:05:56,980 --> 00:06:03,100
This should refer still to my class and therefore now I can push this onto this erate ever to the new

78
00:06:03,100 --> 00:06:05,100
one or the one I read from the file.

79
00:06:05,320 --> 00:06:09,240
And now the remaining work is that I need to save it back into the file.

80
00:06:09,280 --> 00:06:16,560
So I again will use to follow system module and now will use right file and I will write it to the same

81
00:06:16,560 --> 00:06:18,670
path as where I read it from.

82
00:06:18,810 --> 00:06:22,350
And I will put my Jason data into it.

83
00:06:22,380 --> 00:06:24,750
So I get will use that Jason Helper Object.

84
00:06:24,780 --> 00:06:30,630
And now there is the string you find method which takes a javascript object or array and converts it

85
00:06:30,660 --> 00:06:31,470
into Jason.

86
00:06:31,470 --> 00:06:33,250
So that this has the right format.

87
00:06:33,390 --> 00:06:37,560
So they're able take this products array and convert this Jason.

88
00:06:37,590 --> 00:06:40,600
And then this gets written to the file.

89
00:06:40,750 --> 00:06:48,190
And here I also have a callback where I may get an error or it will simply lock dead error here to see

90
00:06:48,190 --> 00:06:51,070
if that works with all that.

91
00:06:51,400 --> 00:06:52,270
Let's go back.

92
00:06:52,450 --> 00:06:55,000
Let's go back to the ad product page and click this button.

93
00:06:55,060 --> 00:06:57,320
This error of course still exists.

94
00:06:57,430 --> 00:07:00,680
But now if we stroll up let's see if that worked here.

95
00:07:00,720 --> 00:07:06,580
That is looking good and in data we indeed see a product Jason file which does contain that one product

96
00:07:06,610 --> 00:07:07,750
we created.

97
00:07:08,170 --> 00:07:09,220
Now that was D.

98
00:07:09,280 --> 00:07:11,650
We have no old data case.

99
00:07:11,650 --> 00:07:16,640
Let's now go back and add and Nashbar product product here.

100
00:07:17,480 --> 00:07:20,840
And see if that also works by scroll up.

101
00:07:21,050 --> 00:07:25,410
Well we also see it here I guess this also worked out just fine.

102
00:07:25,430 --> 00:07:32,510
So this is where again we are able to read a file append data to the existing data or create it if it

103
00:07:32,510 --> 00:07:37,620
didn't exist yet and therefore our data storage in a file seems to work.

104
00:07:37,820 --> 00:07:41,810
Obviously it's a very basic storage but better than nothing.

105
00:07:41,810 --> 00:07:44,960
Now obviously we also want to be able to fetch the data from there.

106
00:07:44,960 --> 00:07:54,020
So in fact all I want to read this file here I will read the file at my Poth And I also will therefore

107
00:07:54,050 --> 00:08:02,030
get my hour or to follow content use an arrow function here and this will then hold that data I want

108
00:08:02,030 --> 00:08:09,130
to use that if I got an error here I want to return an empty array because then I got no products right.

109
00:08:09,140 --> 00:08:14,090
I always want to return an array because that is what fetch all expects but it should at least be empty

110
00:08:14,180 --> 00:08:15,830
in case of an error.

111
00:08:15,860 --> 00:08:20,740
And of course you could also throw an error message and show one but here it'll just be the empty array

112
00:08:21,480 --> 00:08:22,510
otherwise.

113
00:08:22,710 --> 00:08:27,410
And I don't need the else block because after return we would have finished the execution of this function

114
00:08:27,410 --> 00:08:33,940
anyways so ofter does if block I will return my parsed and that's important.

115
00:08:34,040 --> 00:08:36,020
Otherwise it will just be a string.

116
00:08:36,080 --> 00:08:44,000
My parsed file content and this is important to keep in mind because dizzier isn't the end retrieved

117
00:08:44,030 --> 00:08:45,100
as a text.

118
00:08:45,260 --> 00:08:51,050
So to return it as an array you need to call chase and parse.

119
00:08:51,110 --> 00:08:57,200
So now I return my file the content it up parsed form and therefore I get rid of the returned product

120
00:08:57,200 --> 00:09:04,410
statement here and it will now always return my objects on my list of products.

121
00:09:05,000 --> 00:09:12,640
So let's see this in action let's save this and reload this page here is not the find makes sense.

122
00:09:12,640 --> 00:09:18,350
I'm trying to reach read something from this pov but that part is only defined in the Save method.

123
00:09:18,570 --> 00:09:19,980
So for now let's copy it.

124
00:09:20,010 --> 00:09:22,920
We can of course refactor that but let's copy it for now.

125
00:09:23,760 --> 00:09:25,540
And now a very reloaders page.

126
00:09:25,740 --> 00:09:32,980
I still get this error and does can now be very hard to debug or to understand.

127
00:09:33,000 --> 00:09:35,670
But do you know what's going wrong here.

128
00:09:35,670 --> 00:09:36,930
We'll fix it in the next lecture.

