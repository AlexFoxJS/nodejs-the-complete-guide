1
00:00:02,310 --> 00:00:08,160
We have some basic code in place to extract values about the product which we want to delete.

2
00:00:08,280 --> 00:00:14,400
Now to continue we need a route on the back end to which we can send our javascript request for now

3
00:00:14,410 --> 00:00:17,340
let's go to the route's folder and dare to admen J.

4
00:00:17,550 --> 00:00:24,750
Obviously we already have a delete route here a delete product route and we can build up on that route.

5
00:00:24,750 --> 00:00:26,690
There is nothing wrong with that.

6
00:00:26,970 --> 00:00:32,790
But now since we'll sent the request directly through javascript we can actually use a different HTP

7
00:00:32,790 --> 00:00:33,260
word.

8
00:00:33,450 --> 00:00:40,680
Thus far we always use GET and POST because the browser natively is port Steese 4-D requests sent by

9
00:00:40,680 --> 00:00:43,820
the browser by forms submission and by clicking links.

10
00:00:43,890 --> 00:00:48,420
It only knows GET and POST when we send requests through Javascript.

11
00:00:48,420 --> 00:00:54,870
So from browser side javascript we have access to Ivor HTP works too and you'll learn more about the

12
00:00:54,870 --> 00:00:58,160
different HTP words in the rest API section.

13
00:00:58,200 --> 00:01:02,110
One of them is delete and this is a HTP word.

14
00:01:02,190 --> 00:01:05,660
So HTP method which makes a lot of sense for deleting.

15
00:01:05,790 --> 00:01:07,450
Now it's only a semantic thing.

16
00:01:07,530 --> 00:01:14,250
We could use post you can in general use any HTP word to do anything because you to find with your server

17
00:01:14,250 --> 00:01:14,910
side logic.

18
00:01:14,910 --> 00:01:15,750
What will happen.

19
00:01:15,990 --> 00:01:21,670
But it makes sense to try to be clear about your intention and there is a delete.

20
00:01:21,780 --> 00:01:22,970
We can now use it.

21
00:01:23,010 --> 00:01:24,400
So why wouldn't we use it.

22
00:01:24,660 --> 00:01:28,680
So now does a delete route to delete product.

23
00:01:28,680 --> 00:01:38,320
Now I can all change does a bit and may be named as product dash and then the product ID as a dynamic

24
00:01:38,320 --> 00:01:38,890
parameter.

25
00:01:38,920 --> 00:01:43,010
Because delete requests can have dynamic you are parameters.

26
00:01:43,060 --> 00:01:49,660
So now we can extract that information from our u r l and I'll leave the controller action as it is

27
00:01:49,690 --> 00:01:56,170
but I will now name it delete product like this because they are not sending a post request anymore

28
00:01:56,230 --> 00:01:59,750
so I guess this name makes more sense is all.

29
00:01:59,770 --> 00:02:00,380
Is a middle word.

30
00:02:00,400 --> 00:02:01,800
I will keep in place though.

31
00:02:03,500 --> 00:02:10,460
So now that let's go to the admin controller and here I'll rename that function that handler here to

32
00:02:10,460 --> 00:02:15,920
delete product because I renamed it in the route's Faltu and now the product ID first of all is not

33
00:02:15,920 --> 00:02:21,590
extracted from the request body anymore because delete requests as it turns out also are not allowed

34
00:02:21,590 --> 00:02:22,990
to have a request body.

35
00:02:23,270 --> 00:02:26,960
But instead we now have dat you r l parameter.

36
00:02:26,960 --> 00:02:27,760
Product ID.

37
00:02:27,830 --> 00:02:29,990
So I can extract my D from there.

38
00:02:29,990 --> 00:02:34,080
So I simply change body for parents Odets it.

39
00:02:34,340 --> 00:02:39,590
So that gives me my product ID and then does logic here will still work.

40
00:02:39,590 --> 00:02:43,270
I only need to change to response I'll return.

41
00:02:43,490 --> 00:02:47,500
I will not redirect anymore because I'll not load a new page.

42
00:02:47,510 --> 00:02:53,480
Remember that the request triggering this action will be sent behind the scenes for the existing page.

43
00:02:53,480 --> 00:03:00,980
So I want to keep that existing page and therefore my response will be a response or I'll send JS send

44
00:03:00,980 --> 00:03:02,240
data.

45
00:03:02,240 --> 00:03:09,590
JS send data as a special format and with Express Yes I can use a chastened helper method to conveniently

46
00:03:09,590 --> 00:03:15,190
return Jason data and Jason is simply a data format that looks like a javascript object.

47
00:03:15,230 --> 00:03:18,930
So with curly braces and then key value pairs.

48
00:03:19,130 --> 00:03:24,970
The only important thing about Jason is the key is have to be wrapped between table called Hashemites.

49
00:03:25,060 --> 00:03:26,340
This is Jason data.

50
00:03:26,480 --> 00:03:28,150
And this is what we can return here.

51
00:03:28,370 --> 00:03:34,890
And now we can also set a status here of 200 maybe because for adjacent data this would be the default.

52
00:03:35,180 --> 00:03:41,720
But there since we don't redirections on where we get a status code set automatically it would make

53
00:03:41,720 --> 00:03:49,340
sense to be very clear about the status code we have and therefore here are also not to use my default

54
00:03:49,520 --> 00:03:53,750
error handler where I would load the 500 page instead.

55
00:03:53,780 --> 00:03:56,850
I'll also return a response with status 500.

56
00:03:56,870 --> 00:04:02,090
Now that is what I mean about setting that status on your own and there are also veterans I'm Jason

57
00:04:02,090 --> 00:04:02,760
data.

58
00:04:02,780 --> 00:04:08,870
The question is of course which data you simply pass a javascript object year which will then be transformed

59
00:04:08,960 --> 00:04:11,120
to Jasen automatically for you.

60
00:04:11,180 --> 00:04:13,460
So here you can pass on an old javascript object.

61
00:04:13,460 --> 00:04:16,440
You don't need double quotation marks around your keys there.

62
00:04:16,700 --> 00:04:20,610
And here we could have a message read just say success.

63
00:04:20,720 --> 00:04:24,310
Of course not that interesting but we could do that here.

64
00:04:24,410 --> 00:04:30,590
I could have a message where I say deleting product failed.

65
00:04:30,770 --> 00:04:34,270
So now I have that in place and now we have two important changes.

66
00:04:34,280 --> 00:04:36,730
This is how we extract the parents or the product ID.

67
00:04:36,860 --> 00:04:41,500
And now we return Jason responses because we don't want to render a new page.

68
00:04:41,540 --> 00:04:43,680
We just want to return some data.

69
00:04:43,910 --> 00:04:50,090
Obviously we now have to continue in Edman shapes and make sure that we send the request and then work

70
00:04:50,090 --> 00:04:51,510
with their response data.

71
00:04:51,590 --> 00:04:52,880
Not this file though.

72
00:04:53,000 --> 00:05:00,580
I mean the one in the public just folder here we worked on the service side and we added a new route

73
00:05:00,580 --> 00:05:06,100
or we changed the route to use to delete the word and to look like this.

74
00:05:06,190 --> 00:05:11,710
And now we need to send the request there from inside our client side admen chase falls so in the public

75
00:05:11,710 --> 00:05:19,420
folder here we can use the fetch method which is a method supported by the browser for sending HTB requests

76
00:05:19,670 --> 00:05:21,590
and it's not just for fetching data.

77
00:05:21,670 --> 00:05:26,540
Asked and they might suggest it's all for sending data here.

78
00:05:26,770 --> 00:05:28,440
You can't pass a u r l.

79
00:05:28,540 --> 00:05:30,730
So we want to send a request to slash product.

80
00:05:30,730 --> 00:05:33,980
And then of course needs to be replaced with the Product ID.

81
00:05:34,240 --> 00:05:36,960
And this will send that to the same server.

82
00:05:36,970 --> 00:05:41,140
If you don't specify a different host with HTP and then something.

83
00:05:41,200 --> 00:05:45,010
So if you have nothing like data we'll send it to the current host here.

84
00:05:45,100 --> 00:05:53,050
I will add my ID of course and then the second argument is an object where you can configure this fetch

85
00:05:53,170 --> 00:05:54,880
request.

86
00:05:54,880 --> 00:06:00,430
Now here you can set a bunch of things you could add a request body but not for a delete request as

87
00:06:00,430 --> 00:06:01,970
I just explained in the last lecture.

88
00:06:01,990 --> 00:06:05,830
But for a post request which you can also send with that you would set it.

89
00:06:06,010 --> 00:06:09,120
And first of all let's define that this is a delete request.

90
00:06:09,130 --> 00:06:15,130
So method to delete here doesn't have to be uppercase but is a good convention.

91
00:06:15,580 --> 00:06:25,030
Now with Methot set what else can we set Well we can set headers and in the headers we could encode

92
00:06:25,070 --> 00:06:29,440
our C as our token because we still need to attach this to our request.

93
00:06:29,440 --> 00:06:31,410
And right now we are not doing that.

94
00:06:31,480 --> 00:06:35,800
We cannot send that in the request body because delete requests don't have a body.

95
00:06:35,950 --> 00:06:41,710
But the good thing is this see surf package which we are using on a server does not just log in to request

96
00:06:41,710 --> 00:06:42,360
bodies.

97
00:06:42,520 --> 00:06:46,470
It also looks into the query parameters and therefore we could add it there.

98
00:06:46,570 --> 00:06:48,520
And it also looks into the headers.

99
00:06:48,610 --> 00:06:51,490
So there we can add a SEUS or token header.

100
00:06:51,490 --> 00:06:52,880
It will look for this key.

101
00:06:52,960 --> 00:06:58,990
You'll find all the keys for which it will look in the official door so you can add as a token and then

102
00:06:59,020 --> 00:07:03,520
see or F as a value to attached to your outgoing request as well.

103
00:07:03,520 --> 00:07:08,620
Now this will send the request and it will return a promise that allows to listen to the response.

104
00:07:08,680 --> 00:07:17,320
And here I will console log any error I might be getting and here I'll be consul logging any resoled

105
00:07:17,350 --> 00:07:18,190
I might be getting.

106
00:07:18,190 --> 00:07:19,900
Let's see what we have there.

107
00:07:19,900 --> 00:07:25,390
Now one important note by the way I'm not sending any adjacent data with my request here because it

108
00:07:25,390 --> 00:07:28,030
does not delete request without a post body.

109
00:07:28,030 --> 00:07:35,380
If it were and that is something we will see in the rest API section then I would have to parse Jason

110
00:07:35,380 --> 00:07:39,520
data in my backend because there right now.

111
00:07:39,550 --> 00:07:41,150
And that's just an important note.

112
00:07:41,260 --> 00:07:48,280
And actually yes there right now we only have two parser's one for you are all encoded data which we

113
00:07:48,280 --> 00:07:55,050
don't have when we sent Jason data and one for multipart data which we also don't have there we would

114
00:07:55,050 --> 00:08:01,090
have to add a new body parser that is able to handle Jason's data and extract that from incoming requests.

115
00:08:01,170 --> 00:08:06,220
I don't add it here because we don't need it here but we will added later when we need it.

116
00:08:06,720 --> 00:08:11,120
So with data all in place with our client side code adjust it.

117
00:08:11,260 --> 00:08:17,430
Say all of that and let's simply click that delete button after reloading the page and see what we get

118
00:08:18,140 --> 00:08:19,730
clicked delete.

119
00:08:19,870 --> 00:08:22,710
And first of all get a 4 0 for error dead.

120
00:08:22,710 --> 00:08:26,090
This route is not found product with some ID.

121
00:08:26,370 --> 00:08:33,510
And this makes sense because my route product product that isn't the admin routes folder of course we

122
00:08:33,510 --> 00:08:38,540
only get there if our request path starts with Slash admin.

123
00:08:38,550 --> 00:08:40,660
That is all we can figure in the file.

124
00:08:40,860 --> 00:08:47,160
So in my client Edmund J.S. last fall in the public folder I should of course point at slash and burn

125
00:08:47,160 --> 00:08:51,500
slash product slash product ID so that's a little mistake on my side.

126
00:08:51,600 --> 00:08:54,120
Let's now reload after changing this.

127
00:08:54,350 --> 00:08:56,190
And now this is looking good.

128
00:08:56,240 --> 00:09:03,380
I get a response with a status code of 200 with request body which is a readable stream.

129
00:09:03,380 --> 00:09:07,300
I'll show you how to get to that request bawdiness second.

130
00:09:07,610 --> 00:09:11,710
And if I reload the page the product is indeed gone.

131
00:09:11,720 --> 00:09:13,090
Now that's a step forward.

132
00:09:13,160 --> 00:09:16,390
But of course I don't just want to reload the page.

133
00:09:16,400 --> 00:09:18,050
It should be gone immediately.

134
00:09:18,050 --> 00:09:21,800
That would be the main idea of doing this behind the scenes.

135
00:09:21,800 --> 00:09:23,390
So how can we make this work.

