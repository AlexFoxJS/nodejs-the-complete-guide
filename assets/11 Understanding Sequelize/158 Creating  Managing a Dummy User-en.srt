1
00:00:02,300 --> 00:00:04,520
So we need a user.

2
00:00:04,520 --> 00:00:08,390
And as I mentioned for now we have no authentication process.

3
00:00:08,390 --> 00:00:13,690
So for the moment I will create a user manually first of all.

4
00:00:14,030 --> 00:00:19,630
I will remove this force through call because I don't always want to overwrite my tables.

5
00:00:19,640 --> 00:00:22,290
Otherwise all our products will always be gone.

6
00:00:22,340 --> 00:00:23,620
So I go back to sync.

7
00:00:23,690 --> 00:00:27,930
Now that the relations are set up and once all the tables were created.

8
00:00:27,950 --> 00:00:34,880
So in this then call here I actually Nel's it want to create my user and they are over here.

9
00:00:35,150 --> 00:00:41,360
I will use my user model and first of all check if I find a user with the ID one.

10
00:00:41,450 --> 00:00:46,400
And this is of course just some dummy code to see if I do have one user because I only need one for

11
00:00:46,400 --> 00:00:48,440
now as we have no indication.

12
00:00:48,550 --> 00:00:53,170
And if I do have it or not create a new one if I don't have it I will.

13
00:00:53,600 --> 00:01:01,190
So here I have user defined by id one and I will return this for all to take app listen out of this

14
00:01:01,340 --> 00:01:08,000
then block and then add a new then block where I will get my retrieved user here.

15
00:01:08,000 --> 00:01:13,970
I'll then check if I don't have a user so if this is null because if I don't have a user I want to create

16
00:01:13,970 --> 00:01:23,270
a new one by calling user recreate there I'll pass in a javascript object where I set the name to Max

17
00:01:23,630 --> 00:01:28,910
and to email to some dummy e-mail you can enter any values you want here.

18
00:01:28,910 --> 00:01:37,620
Just make sure you populate all the fields you defined in your user model does all the returns promise

19
00:01:37,630 --> 00:01:38,880
all returned is true.

20
00:01:39,070 --> 00:01:42,970
But also we might never execute just because we already got a user.

21
00:01:43,150 --> 00:01:45,990
So for this case our return user.

22
00:01:46,330 --> 00:01:54,550
But now we're inconsistent because now this anonymous function ever returns a promise or just an object

23
00:01:54,910 --> 00:02:00,050
we should always return to same so that we can change then year successfully.

24
00:02:00,640 --> 00:02:06,100
And therefore I will actually called Promise resolve here which is essentially a promise that will immediately

25
00:02:06,100 --> 00:02:07,700
result to user.

26
00:02:07,730 --> 00:02:13,570
Technically you can omit this though because if you return a value in a then block it is automatically

27
00:02:13,570 --> 00:02:15,150
wrapped into a new promise.

28
00:02:15,160 --> 00:02:19,060
Just wanted to highlight that you should make sure that the values are equal.

29
00:02:19,150 --> 00:02:20,590
But here it's managed for us.

30
00:02:21,040 --> 00:02:27,000
And therefore here I now definitely noted I got a user we can cancel lock to user here.

31
00:02:27,490 --> 00:02:39,250
And I also started listening to my server here so here's my user creation result that I get back and

32
00:02:39,270 --> 00:02:46,830
if I go back to my workbench database and it refresh the users table we see the user here to.

33
00:02:46,920 --> 00:02:55,340
And if I do restart my server with a start that still works and it doesn't create a new user here because

34
00:02:55,340 --> 00:02:57,890
we already have one so this code is working as it should.

35
00:02:58,040 --> 00:03:06,530
I'll comment out this it with this change made we now always have a user equatable as a next step all

36
00:03:06,540 --> 00:03:13,440
will register a new middleware because I want to store to the user in my request so that I can use it

37
00:03:13,440 --> 00:03:16,510
from anywhere in my app conveniently.

38
00:03:16,740 --> 00:03:23,460
So maybe you're all adding new middleware ultimately at a function with request response and next as

39
00:03:23,460 --> 00:03:25,510
you learned it before in this course.

40
00:03:27,060 --> 00:03:34,320
And then here I want to reach out to my database and retrieve my user with user find by id one.

41
00:03:34,320 --> 00:03:38,120
Now you might be wondering if Diskin ever return a user.

42
00:03:38,220 --> 00:03:40,810
If we only create it down there.

43
00:03:40,960 --> 00:03:45,770
Keep in mind app use your only registers some middleware.

44
00:03:45,930 --> 00:03:53,540
So for an incoming request we will then execute this function NPM start runs this code for the first

45
00:03:53,540 --> 00:04:00,140
time an NPM start is what runs sequel icier not incoming requests incoming requests are only funneled

46
00:04:00,140 --> 00:04:03,020
for our middleware so NPM start runs.

47
00:04:03,060 --> 00:04:08,480
This does code which sets up our database but never this anonymous function.

48
00:04:08,540 --> 00:04:12,890
It just registers it as middleware for incoming requests.

49
00:04:13,130 --> 00:04:18,830
So this code will only run for incoming requests which on the Iran can only reached us if we did successfully

50
00:04:18,830 --> 00:04:21,120
start our server here with app listen.

51
00:04:21,260 --> 00:04:25,710
And that in turn is only true if we are done with our initialization code here.

52
00:04:25,910 --> 00:04:38,500
So we are guaranteed to find a user here so we can find a user by your.

53
00:04:38,540 --> 00:04:42,500
And what do we want to do with my user then block then.

54
00:04:42,680 --> 00:04:45,800
Well I want to store it in a request.

55
00:04:45,920 --> 00:04:51,410
So here I will set request user equal to user and we can do that.

56
00:04:51,440 --> 00:04:55,010
We can simply add a new field to our request object.

57
00:04:55,010 --> 00:05:01,850
We should just make sure we don't overwrite an existing one like bloddy but user is undefined by default.

58
00:05:01,850 --> 00:05:05,610
Now I'm storing the user I retrieved from the database in there.

59
00:05:05,630 --> 00:05:12,260
Also keep in mind the user were retrieving from the database here is not just a javascript object with

60
00:05:12,260 --> 00:05:18,330
the values stored in a database it's a sequel ise object with de-value stored in the database.

61
00:05:18,500 --> 00:05:23,040
With all these utility methods sequel's added like destroy.

62
00:05:23,300 --> 00:05:28,220
So we're storing this sequel eyes Optik here and a request and not just a javascript object with the

63
00:05:28,220 --> 00:05:31,120
field values is that we got the extended version here.

64
00:05:31,220 --> 00:05:36,950
And therefore whenever we called request user in the future in our app we can also execute methods like

65
00:05:36,950 --> 00:05:38,870
destroy.

66
00:05:38,880 --> 00:05:46,200
So with that all I need to do is I need to call next year of course so that we can continue with the

67
00:05:46,200 --> 00:05:49,880
next step if we get our user and stored it.

68
00:05:49,920 --> 00:05:56,880
Now with that we've got the user set up and retrieved let's make sure that we can also use it to create

69
00:05:56,880 --> 00:05:59,480
new products that are associated to that user.

