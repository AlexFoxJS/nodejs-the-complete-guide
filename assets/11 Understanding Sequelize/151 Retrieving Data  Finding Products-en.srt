1
00:00:02,390 --> 00:00:09,230
With the product create it time to also retrieve our product when we for example visit our next route.

2
00:00:09,230 --> 00:00:15,480
So in a shop controller here and get in next it would be nice if we could get our products.

3
00:00:15,500 --> 00:00:22,340
This current approach with Thach all will not work because product is now a sequel AIs model as we're

4
00:00:22,340 --> 00:00:27,890
importing it from our model file and the sequel as models simply have no fecche old method.

5
00:00:28,160 --> 00:00:34,580
But sequel's models have plenty of methods for getting data and instead of fecche all day for example

6
00:00:34,690 --> 00:00:38,940
I find all to get all the records for this model.

7
00:00:39,050 --> 00:00:45,780
Now find all as you can imagine also gives us back a promise where we can use to use salt.

8
00:00:45,950 --> 00:00:48,280
Now find All right away.

9
00:00:48,280 --> 00:00:54,650
Also can be configured with some options we can pass our options here and we could find a WHERE condition

10
00:00:55,050 --> 00:00:59,320
to also restrict that kind of data we retrieve.

11
00:00:59,540 --> 00:01:04,780
And you can read more about the possible options you have there and how to write this in the official

12
00:01:04,800 --> 00:01:12,080
box but we'll also see a way of limiting the data we retrieve when we later fetch a single product.

13
00:01:12,080 --> 00:01:15,260
For now let's get all without any restrictions.

14
00:01:15,260 --> 00:01:20,750
And then here in the then block we should have our products.

15
00:01:20,760 --> 00:01:29,900
So here let's assume we get a products list aere to our function to get executed that gets executed

16
00:01:29,900 --> 00:01:30,750
here.

17
00:01:30,950 --> 00:01:36,690
Here I will log any potential errors we might have and now of then block.

18
00:01:36,740 --> 00:01:43,100
I essentially want to render my page of course once we got the products and simply passed the product

19
00:01:43,220 --> 00:01:47,540
into the process key off my render function here.

20
00:01:47,870 --> 00:01:53,160
Let's remove the fetch all call down there was that time to save this.

21
00:01:53,510 --> 00:01:56,220
Let's go back to just localhost.

22
00:01:56,600 --> 00:01:58,190
And indeed this is looking good.

23
00:01:58,190 --> 00:02:00,120
You'll see it retrieves the data.

24
00:02:00,200 --> 00:02:03,050
The data still has the same field names as before.

25
00:02:03,080 --> 00:02:06,680
They are for rendering this automatically works.

26
00:02:06,680 --> 00:02:15,000
Now we need the same logic on the product's page and therefore I will just copy that and go to get products

27
00:02:16,540 --> 00:02:21,010
added to your end of course replace the render function here.

28
00:02:21,160 --> 00:02:27,220
Make sure to pass products to Pre-OT's though and of course as I mentioned earlier and this course you

29
00:02:27,220 --> 00:02:32,910
could refactored at 40 index and the products page to reuse this code instead of copying it.

30
00:02:32,920 --> 00:02:37,460
I just liked the more explicit approach here which makes it really clear what's happening.

31
00:02:38,680 --> 00:02:41,310
So now we gotta get products working too.

32
00:02:41,410 --> 00:02:43,350
Hopefully yeah this is looking good.

33
00:02:43,360 --> 00:02:48,010
Both work and we see even a difference because here I have a plank but with the dollar sign and the

34
00:02:48,010 --> 00:02:50,290
text and here I don't have it.

35
00:02:50,290 --> 00:02:53,110
So this is working and this is a huge step forward.

36
00:02:53,170 --> 00:02:56,940
Now as a next step let me show you how to retrieve a single product.

37
00:02:56,980 --> 00:02:58,600
If we click on details here.

