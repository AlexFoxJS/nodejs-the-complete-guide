1
00:00:02,150 --> 00:00:06,010
Knouted we have are often dictation flow and drought protection in place.

2
00:00:06,080 --> 00:00:09,500
Let's talk about security and they're about C S r f.

3
00:00:09,500 --> 00:00:14,150
Attacks C S R F stands for cross-eyed request forgery.

4
00:00:14,150 --> 00:00:15,520
Now what is this.

5
00:00:15,530 --> 00:00:24,590
This is a special kind of attack pattern or approach where people can abuse your sessions and trick

6
00:00:24,590 --> 00:00:28,490
users of your application to execute malicious code.

7
00:00:28,490 --> 00:00:29,690
This is how it works.

8
00:00:29,780 --> 00:00:31,520
You have a user in your application.

9
00:00:31,520 --> 00:00:35,360
And now let's assume this is a Wiznitzer who indeed is locked in.

10
00:00:35,450 --> 00:00:39,830
You have your server side code and your database with which you interact.

11
00:00:39,830 --> 00:00:45,050
Now the user interacts with your front end views so the pages you render back and you get a session

12
00:00:45,050 --> 00:00:48,380
for that user and of course a cookie that belongs to that session.

13
00:00:48,380 --> 00:00:54,690
So everything you knows now the user can do intended things like for example send money to B if you

14
00:00:54,690 --> 00:01:00,500
are building a banking app or in our application order some products with his own shipping address.

15
00:01:00,530 --> 00:01:09,360
If we had such a checkout process now in a C S R F attack scenario your user is tricked onto a fake

16
00:01:09,450 --> 00:01:10,200
site.

17
00:01:10,530 --> 00:01:15,010
And this can be done for example by sending a link in an e-mail.

18
00:01:15,090 --> 00:01:20,280
That side can look like your own page but it technically is a different one.

19
00:01:20,370 --> 00:01:28,470
Now on that site there could be a link leading to your page to your real page executing some request

20
00:01:28,470 --> 00:01:29,400
there.

21
00:01:29,400 --> 00:01:36,480
Of course you could include a form for example which sends a post request to your page so to your own

22
00:01:36,600 --> 00:01:42,790
notes server where you added some fields to send money to another person to see.

23
00:01:42,810 --> 00:01:47,880
In this case instead of beat to the user it is pretty invisible because he saw a page that maybe looked

24
00:01:47,880 --> 00:01:52,550
like your page or clicked on a link that instantly redirected to your page.

25
00:01:52,590 --> 00:01:58,440
But with behind the scenes some data being sent there that does something the user would not want to

26
00:01:58,440 --> 00:01:59,630
do normally.

27
00:01:59,640 --> 00:02:01,080
Now why does it work.

28
00:02:01,260 --> 00:02:10,500
Well since you got valid session for an user if you send something to your site to your service your

29
00:02:10,500 --> 00:02:17,310
session is used for that user and therefore that behind the scenes data that the user never sees that

30
00:02:17,340 --> 00:02:24,250
configures their money transferral or the order in a certain way that it's not OK to the user.

31
00:02:24,330 --> 00:02:30,510
This part is invisible to the user but the Valot session gets used for it because your server is used

32
00:02:30,810 --> 00:02:36,330
and therefore does this except it does the attack pattern where the session can be stolen.

33
00:02:36,330 --> 00:02:42,660
So to say where you can abuse the fact the users are locked in and you can simply trick them into making

34
00:02:42,660 --> 00:02:48,770
requests which they might not even notice and obviously want to protect against this attack pattern.

35
00:02:48,900 --> 00:02:51,140
And how can we protect now.

36
00:02:51,630 --> 00:02:59,130
Well the idea is that we want to ensure that people can only use your session if they are working with

37
00:02:59,220 --> 00:03:00,730
your views.

38
00:03:00,750 --> 00:03:07,810
So with the view is rendered by your application so that this session is not available on any fake page

39
00:03:07,890 --> 00:03:15,810
that might look like your page but that aren't your page and to ensure this to add this feature we will

40
00:03:15,810 --> 00:03:18,480
use a so-called see as our token.

41
00:03:18,480 --> 00:03:20,790
Now let me show you how this works in the next lecture.

