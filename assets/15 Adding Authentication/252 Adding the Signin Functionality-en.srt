1
00:00:02,160 --> 00:00:09,050
Now that we are able to sign up let's also add some functionality to ensure that we can sign in.

2
00:00:09,590 --> 00:00:17,630
And for that we obviously have our log in page and when we enter something here we reach our posts log

3
00:00:17,630 --> 00:00:18,620
in route here.

4
00:00:18,800 --> 00:00:24,350
Now there we still have the old dummy code where we just find our default user which by the way won't

5
00:00:24,350 --> 00:00:26,380
exist anymore because we deleted it.

6
00:00:26,570 --> 00:00:28,360
And then we would create a session.

7
00:00:28,370 --> 00:00:32,030
This is obviously not the approach I want to use anymore.

8
00:00:32,060 --> 00:00:38,040
Instead what I want to do is I want to find the user in here but I want to find the user by the email

9
00:00:38,120 --> 00:00:39,170
the user entered.

10
00:00:39,170 --> 00:00:45,740
So let's first of all extract that Let's extract the emails from that request body and let's let's extract

11
00:00:45,770 --> 00:00:48,130
the password from the request body.

12
00:00:48,170 --> 00:00:51,760
These are two pieces of information I need for assigning a user in.

13
00:00:52,370 --> 00:00:59,500
And then here I'll not use find by ID but find one to find one user with specific e-mail.

14
00:00:59,600 --> 00:01:05,330
And there should be only one user with an email in the database and all find to user by looking for

15
00:01:05,330 --> 00:01:11,850
the email field in the documents and comparing it to the e-mail value we are extracting here.

16
00:01:12,990 --> 00:01:14,420
Never find a user here.

17
00:01:14,430 --> 00:01:21,900
So if I make it into your and I don't have a user then I know that we can check the password next.

18
00:01:22,050 --> 00:01:25,900
If I don't have a users you're so user is undefined.

19
00:01:25,920 --> 00:01:31,080
I did find a user in the database and then I can simply return here.

20
00:01:31,140 --> 00:01:37,980
Not execute the honor code and simply redirect back to log in for now because the log in failed because

21
00:01:37,980 --> 00:01:45,170
we tried to use an e-mail which does not exist in the database as we didn't find a user for it if we

22
00:01:45,170 --> 00:01:46,140
make it past.

23
00:01:46,290 --> 00:01:52,080
If Geck we know that the e-mail exists but now we need to validate the password of course we'll do it

24
00:01:52,090 --> 00:01:58,650
as the big trip package again because deep password is of course stored in a hashed form.

25
00:01:58,850 --> 00:02:02,090
And I mentioned that we can't rewords this.

26
00:02:02,090 --> 00:02:05,250
So how can we now compare the password.

27
00:02:05,660 --> 00:02:14,630
Well remember that big tripped was responsible for creating the hash Beecroft uses a certain algorithm

28
00:02:14,630 --> 00:02:15,410
for that.

29
00:02:15,680 --> 00:02:22,040
And we can essentially passed the password the user entered into B tripped and let the script compare

30
00:02:22,040 --> 00:02:29,840
it to the hashed value and Picric can then find out if the hashed value does make sense taking into

31
00:02:29,840 --> 00:02:34,820
account the algorithm that is used for creating that for the password you entered as plain text.

32
00:02:34,910 --> 00:02:41,120
So if that plaintext password if you what hash it could result in the hash password and if the answer

33
00:02:41,120 --> 00:02:48,450
is true then you know the user entered a valid password and Fritz decrypt has to compare function.

34
00:02:48,590 --> 00:02:50,440
And there we entered a password.

35
00:02:50,510 --> 00:02:52,100
We want to check.

36
00:02:52,130 --> 00:02:57,290
So the password we extract from the incoming request and then the hashed value against you want to compare

37
00:02:57,290 --> 00:02:57,580
it.

38
00:02:57,860 --> 00:03:02,960
And that is found in our user document which we get from the database and they are of course in the

39
00:03:02,960 --> 00:03:04,890
password field.

40
00:03:04,940 --> 00:03:07,970
Now this also returns a promise.

41
00:03:07,970 --> 00:03:12,250
So here we can add then and a catch block.

42
00:03:12,320 --> 00:03:14,620
Now if we have an error here.

43
00:03:14,660 --> 00:03:24,280
So if we fail to compare this then I also want to redirect back to the log in page but if we make it

44
00:03:24,280 --> 00:03:28,730
into the then block then I want to check whether we were successful.

45
00:03:28,810 --> 00:03:33,300
Now important with compair will only face an error.

46
00:03:33,340 --> 00:03:40,720
If something goes wrong not if the passwords do not match in both a matching and an non-matching case

47
00:03:40,930 --> 00:03:47,540
we make it into the then block and result will be a boolean that is true if the passwords are equal.

48
00:03:47,680 --> 00:03:52,500
So we could also name to do match to make this clearer and it will be false.

49
00:03:52,570 --> 00:03:54,330
If they are not equal.

50
00:03:54,400 --> 00:03:57,050
So here we can check if do match is true.

51
00:03:57,130 --> 00:04:04,750
That means the passwords are equal the user entered a valid password and then we could return to not

52
00:04:04,750 --> 00:04:06,280
execute any other code.

53
00:04:06,280 --> 00:04:09,660
We could return a redirect to the starting page.

54
00:04:09,850 --> 00:04:16,030
If we don't make it into their den we want to redirect back to the log in page because then the user

55
00:04:16,030 --> 00:04:18,190
entered the invalid password.

56
00:04:18,190 --> 00:04:21,650
Now we also want to set a session as we did it before.

57
00:04:21,910 --> 00:04:25,980
And that session code should only be set if we have a matching password.

58
00:04:25,990 --> 00:04:30,950
So if the user did authenticate then we can still say it is locked in.

59
00:04:31,150 --> 00:04:36,790
We can still store the user in the session because we still need the user object and the user your keep

60
00:04:36,790 --> 00:04:43,690
in mind is to use or we retrieved from the database and we want to save that session and only redirect

61
00:04:43,770 --> 00:04:47,200
in that session after we saved it successfully.

62
00:04:47,200 --> 00:04:54,520
Therefore we should also return this to a white code execution of this line because the callback here

63
00:04:54,610 --> 00:04:57,070
will execute asynchronously.

64
00:04:57,100 --> 00:05:01,580
So this needs to be returned to not execute this line here in here.

65
00:05:01,600 --> 00:05:07,510
We don't need to return then because after this line this line can't be reached because this line isn't

66
00:05:07,540 --> 00:05:10,570
a callback in a different function.

67
00:05:10,570 --> 00:05:15,780
So with all of that in place we should be able to sign in if we do enter a valid password.

68
00:05:16,180 --> 00:05:17,490
Let's give this a try.

69
00:05:17,770 --> 00:05:25,450
So keep in mind my email is tasked to and I use testor as a password and first of all I will try a wrong

70
00:05:25,510 --> 00:05:29,250
email redirect it back to log in.

71
00:05:29,270 --> 00:05:31,930
So this didn't seem to succeed.

72
00:05:32,380 --> 00:05:38,680
We can also quickly go to the sessions and clear all sessions here so that we can really prove that

73
00:05:38,680 --> 00:05:41,110
no session was created.

74
00:05:42,330 --> 00:05:50,340
So now let me enter a valid email but an incorrect password and again redirect it back and no session

75
00:05:50,340 --> 00:05:51,960
was created here.

76
00:05:52,440 --> 00:05:58,760
But now let me entered a valid email and the valid password.

77
00:05:58,970 --> 00:06:00,340
And now I'm going to start page.

78
00:06:00,350 --> 00:06:02,840
I see all options which is looking good.

79
00:06:02,870 --> 00:06:04,630
We get no error here.

80
00:06:04,910 --> 00:06:11,240
And if I have a look at my session's collection we've got a session here because now I am logged in

81
00:06:11,310 --> 00:06:13,470
does this user object with which I'm locked in.

82
00:06:13,470 --> 00:06:14,770
So is this correct.

83
00:06:14,780 --> 00:06:19,660
And now we got a working log in flow taking into account our email and so on.

