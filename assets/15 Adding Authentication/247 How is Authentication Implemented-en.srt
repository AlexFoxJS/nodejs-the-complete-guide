1
00:00:02,120 --> 00:00:08,360
How is authentication implemented same set up we get a user get our backend server side code into a

2
00:00:08,360 --> 00:00:09,210
database.

3
00:00:09,330 --> 00:00:12,490
And now typically a user will ascend a log in request.

4
00:00:12,500 --> 00:00:18,770
Now obviously for that a user a visitor of our page needs to have signed up before but offer you signed

5
00:00:18,770 --> 00:00:19,040
up.

6
00:00:19,040 --> 00:00:24,410
You can log in with your email and password and on the server we'd check whether that email and password

7
00:00:24,410 --> 00:00:25,940
combination is valid.

8
00:00:25,940 --> 00:00:30,060
However we have a user with that e-mail and their password in our database.

9
00:00:30,380 --> 00:00:35,610
If that is the case we create a session for this user and you learned how this works in the last module

10
00:00:36,140 --> 00:00:39,160
and this session then identifies this user.

11
00:00:39,180 --> 00:00:45,500
This is required because otherwise without a session even if we find out that the credentials are valid

12
00:00:45,740 --> 00:00:52,580
for the very next request the user would be locked out again because remember requests interact separated

13
00:00:52,670 --> 00:00:53,410
from each other.

14
00:00:53,420 --> 00:00:55,620
They don't know anything about each other.

15
00:00:55,640 --> 00:00:57,370
We need a session to connect them.

16
00:00:57,380 --> 00:01:04,420
That is why we create one with the user or the authentication information we then return a 200 response.

17
00:01:04,430 --> 00:01:10,520
So basically a success response and we obviously also store the cookie belonging to the session on the

18
00:01:10,520 --> 00:01:10,990
client.

19
00:01:11,000 --> 00:01:12,710
We returned with that response.

20
00:01:12,830 --> 00:01:20,000
So did we really established a session and there after the user is able to visit our restricted routes

21
00:01:20,210 --> 00:01:26,150
because now this cookie is sent with every request on the server we can connect to this cookie to a

22
00:01:26,150 --> 00:01:31,490
session and then the session we have the information whether that user is signed in or not.

23
00:01:31,490 --> 00:01:35,990
And if the user is signed in we can grant access to certain resources.

24
00:01:35,990 --> 00:01:43,310
This is how authentication is implemented in any web application that renders the use will learn a different

25
00:01:43,310 --> 00:01:48,390
way of adding authentication later when we work with an arrest and graph Q API.

26
00:01:48,620 --> 00:01:55,130
But for a traditional web app as we are building it here where we do render Ejay as or handle bars or

27
00:01:55,130 --> 00:02:01,370
whatever templating engine you use where we render such use there we will use this session based on

28
00:02:01,370 --> 00:02:02,420
indication approach.

