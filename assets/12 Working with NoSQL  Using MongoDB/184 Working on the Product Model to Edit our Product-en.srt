1
00:00:02,150 --> 00:00:11,090
Time to edit products and Ford s all first of all work on my admen genius fall in the controller's folder.

2
00:00:11,240 --> 00:00:18,050
There we have two routes that are or two functions that are related to editing products to get the added

3
00:00:18,050 --> 00:00:23,840
product page which is responsible for fetching the product that should be edited and for rendering it

4
00:00:24,230 --> 00:00:29,810
and the post edit product page which is responsible for saving these changes to the database.

5
00:00:29,840 --> 00:00:31,830
I'll comment both back in.

6
00:00:31,910 --> 00:00:33,930
And let's start with get at it.

7
00:00:33,940 --> 00:00:38,200
Product there the majority of the code can stay as it is.

8
00:00:38,360 --> 00:00:43,180
But when we then fetch the fitting product we of course do this differently.

9
00:00:43,430 --> 00:00:50,490
We use product find by id and we find the product with Prod. Id like this.

10
00:00:50,630 --> 00:00:53,120
And then we still get back products however.

11
00:00:53,330 --> 00:00:55,730
Well actually we don't get back products anymore.

12
00:00:55,910 --> 00:01:03,250
We get back one product year so no need to store it in a concert like this and extract it from an array.

13
00:01:03,290 --> 00:01:10,100
We get back one product automatically because we wrote that method in such a way and we therefore can

14
00:01:10,130 --> 00:01:12,200
rendered this product.

15
00:01:12,270 --> 00:01:14,170
So this should work.

16
00:01:14,220 --> 00:01:19,030
Now let's quickly have a look at the view that belongs to this controller action.

17
00:01:19,080 --> 00:01:23,940
So it is a product Ejaz file and in there you know what I'm looking for.

18
00:01:24,030 --> 00:01:30,120
We want to make sure we're always using product underscore ID when using the product ID just to make

19
00:01:30,120 --> 00:01:35,050
sure that we extract the right thing from the document we get back from the server.

20
00:01:35,670 --> 00:01:42,750
So now with that we get everything in place to hopefully make this added Button work partly click on

21
00:01:42,750 --> 00:01:43,380
it.

22
00:01:43,770 --> 00:01:47,860
Well almost Let's leave it on this page.

23
00:01:47,910 --> 00:01:53,310
The control should work but in the routs and the Edman shares fall I of course have a comment disk Getaround

24
00:01:53,340 --> 00:01:54,200
back in.

25
00:01:54,210 --> 00:01:56,080
So let's make sure does a stun.

26
00:01:56,130 --> 00:02:03,390
And now that if we now reload that page we indeed see the form with the default values filled back in.

27
00:02:03,390 --> 00:02:04,980
So now this is liberating.

28
00:02:05,010 --> 00:02:08,410
But of course it's not that useful to only see the data.

29
00:02:08,460 --> 00:02:15,980
And we were able to fetch data before the interesting part now would be to update it now to update it.

30
00:02:15,990 --> 00:02:19,200
Let's go back to the product model.

31
00:02:19,650 --> 00:02:28,400
How could we update our product which is stored in the database well.

32
00:02:28,900 --> 00:02:36,780
Let's go to the constructor and let's add a fifth argument here the ID and then I'll say this underscore

33
00:02:36,770 --> 00:02:38,830
ID is equal to the idea I'm getting here.

34
00:02:38,830 --> 00:02:42,040
You could name does underscore ID or two if you want it to.

35
00:02:42,040 --> 00:02:46,540
So now we accept a kind of optional fifth argument.

36
00:02:46,600 --> 00:02:49,070
We're not passing it on the places of tiap.

37
00:02:49,090 --> 00:02:56,980
But here I do at least create the option of passing this to an ID will therefore be undefined and be

38
00:02:56,980 --> 00:02:58,640
auto generated by Mangieri B.

39
00:02:58,760 --> 00:03:06,010
Or we did set it and then when we called SAVE I don't want to insert one.

40
00:03:06,010 --> 00:03:08,670
I want to create a new product instead.

41
00:03:08,680 --> 00:03:16,240
So for this what I'll do is I'll simply check if this underscore ID if that is set and if it is set

42
00:03:16,540 --> 00:03:18,840
we'll update the product.

43
00:03:19,950 --> 00:03:22,220
Otherwise we'll insert it.

44
00:03:22,260 --> 00:03:25,490
So move my Konst function up there.

45
00:03:25,500 --> 00:03:28,340
I always need access to the database in both cases.

46
00:03:28,990 --> 00:03:39,770
And now create a new variable Let d be up for a D-B operation and then the else case where we insert

47
00:03:40,130 --> 00:03:51,490
a document D-B up is equal to my connection to the database and then connecting to collection and then

48
00:03:51,880 --> 00:03:59,820
inserting one and then down there I can use D-B up to follow along and actually return that.

49
00:03:59,830 --> 00:04:06,940
So now I have one case where D-B OP is simply my insert command and then I return my result or D-B OP

50
00:04:07,000 --> 00:04:13,950
is access to my database and to the products collection still.

51
00:04:14,480 --> 00:04:21,580
But then here I use Update 1 and as the name suggests update one will update exactly one element.

52
00:04:21,580 --> 00:04:25,860
There are all this update many where you can update multiple elements at once.

53
00:04:25,880 --> 00:04:29,580
But here I know I only want to update one so I can use up that one.

54
00:04:29,600 --> 00:04:33,380
And now Apptd one takes at least two arguments.

55
00:04:33,380 --> 00:04:41,030
The first one is that we add a filter that defines which element or which document we want to update.

56
00:04:41,030 --> 00:04:46,580
So here again I'll pass a javascript object and we can filter for equality also.

57
00:04:46,790 --> 00:04:50,520
Or run more complex queries which you again can't learn about.

58
00:04:50,520 --> 00:04:53,340
And my mom would be course if you want to add here.

59
00:04:53,420 --> 00:04:58,610
I only want to find a document where the underscore ID is equal to.

60
00:04:58,870 --> 00:05:08,300
And now again I'll create a new Mongomery B object id to which I pass this underscore ID so the ID which

61
00:05:08,330 --> 00:05:10,600
is part of that object here.

62
00:05:10,880 --> 00:05:18,920
So I'm looking for a document where the ID matches the ID I have here in my product I'm currently working

63
00:05:18,920 --> 00:05:25,810
with and for that document we now has a second argument to update one.

64
00:05:25,820 --> 00:05:29,520
We now specify how to update that document.

65
00:05:29,560 --> 00:05:36,130
This again is a javascript object where we described the update and this is now not the new object.

66
00:05:36,170 --> 00:05:42,620
So we don't say this year as you could imagine that we tell long would we be fine with the existing

67
00:05:42,620 --> 00:05:45,280
document and replace it with this update.

68
00:05:45,280 --> 00:05:47,500
One does not replace.

69
00:05:47,630 --> 00:05:53,420
Instead we have to describe the operation and we do this by using a special property name which is understood

70
00:05:53,450 --> 00:05:59,150
by man would it be kind of a reserved name you could say Dollar Sign set.

71
00:05:59,180 --> 00:06:01,630
This again takes an object as a value.

72
00:06:01,640 --> 00:06:08,000
And here we describe the changes we want to make to do exist in a document which we found with this

73
00:06:08,120 --> 00:06:09,500
filter.

74
00:06:09,500 --> 00:06:18,830
And here you could actually say this and you would instruct would be to simply set these key value fields

75
00:06:18,920 --> 00:06:23,610
which you have in your object here to to document it found in the database.

76
00:06:23,930 --> 00:06:29,210
And therefore since these are only key value pairs which exist in the document in the database it will

77
00:06:29,270 --> 00:06:34,060
update the values of the document in the database with your new values.

78
00:06:34,310 --> 00:06:39,800
You could also write dozen or more were BOA's way and explicit say title should be equal to this title

79
00:06:40,040 --> 00:06:40,870
and so on.

80
00:06:40,910 --> 00:06:48,670
But since we want to replace all fields we can't just say this here and now with that we have a database

81
00:06:48,670 --> 00:06:52,640
operation that will update an existing database object.

82
00:06:52,690 --> 00:06:59,290
By the way DD will not be overwritten or anything like that only the fields are.

83
00:06:59,290 --> 00:07:05,350
So with that let's go back to our admin chat controller and and post edit product that is the part I

84
00:07:05,350 --> 00:07:11,760
want to work on in the next lecture to make sure that we actually are able to save our product.

