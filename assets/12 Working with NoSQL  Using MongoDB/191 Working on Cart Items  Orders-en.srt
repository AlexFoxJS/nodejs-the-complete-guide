1
00:00:02,170 --> 00:00:04,360
So we run it on products and users.

2
00:00:04,390 --> 00:00:08,770
It's now time to work on the card and the card items again and that will now change.

3
00:00:08,770 --> 00:00:10,640
Now we're using Muang would you be.

4
00:00:10,660 --> 00:00:15,580
So let me start with the card model now what is what's the overall goal we have here.

5
00:00:15,580 --> 00:00:23,710
Well obviously for every user we have we want to store a card right and that user will have a cart and

6
00:00:23,770 --> 00:00:27,160
that card will then hold the products.

7
00:00:27,160 --> 00:00:29,210
So actually with them would you be.

8
00:00:29,230 --> 00:00:35,080
This is a great place for embattled documents because we have a strict one to one relation between a

9
00:00:35,080 --> 00:00:39,640
user and a card and therefore there is no need to manage just with a reference.

10
00:00:39,910 --> 00:00:47,500
I could actually get rid of my card items and my card model so that I just have product and user.

11
00:00:47,500 --> 00:00:49,680
And for now also the orders.

12
00:00:49,890 --> 00:00:56,290
And now on the user model there I also want to store my card items.

13
00:00:56,290 --> 00:00:57,890
Now the question is how.

14
00:00:58,330 --> 00:01:08,010
The answer is we get our shop jast controller and then there we got code to store something in a cart

15
00:01:08,220 --> 00:01:13,830
here for a user we got the card and then we got the products to see what's in there update it and then

16
00:01:13,830 --> 00:01:15,360
save it back.

17
00:01:15,420 --> 00:01:18,210
Now we can't do that without the help of the user model.

18
00:01:20,520 --> 00:01:27,960
Let's say on a user object instead of just having safe I also add a new method add to cart something

19
00:01:27,960 --> 00:01:28,800
like this.

20
00:01:30,040 --> 00:01:35,580
Now here Add to Cart would be a product I want to add to the card of course.

21
00:01:35,590 --> 00:01:39,840
Essentially what we're doing here and shop are already here.

22
00:01:39,880 --> 00:01:46,620
We already fetch or we got everything we need to fetch a product which we could then add to the cart.

23
00:01:46,750 --> 00:01:55,360
So I expect to get a product to your chicken at and then add to cart I can have all the logic I need

24
00:01:55,600 --> 00:02:01,000
to find out if that product is already inside of the cards and therefore if I just want to increase

25
00:02:01,000 --> 00:02:08,720
the quantity or if it is not and therefore I want to added for the first time now to understand how

26
00:02:08,720 --> 00:02:14,870
this works you must not forget dead add to card will be called on a user object and will create that

27
00:02:14,870 --> 00:02:22,530
optic with data we fetched from the database with the help of find by ID here we will return a user.

28
00:02:22,580 --> 00:02:27,000
So therefore we just need to be able to accept more data in a constructor.

29
00:02:27,110 --> 00:02:34,460
For example the cart so we can also store the card in our javascript object here which will be based

30
00:02:34,460 --> 00:02:38,480
on the data stored in the database.

31
00:02:38,490 --> 00:02:45,090
So now we can assume that we'll have a cart property on our user and now we just need to find out if

32
00:02:45,090 --> 00:02:48,070
that card contains a certain product already.

33
00:02:48,100 --> 00:02:55,890
Now the cart will essentially be an object lets say that looks something like this an object with some

34
00:02:55,980 --> 00:03:00,310
items so an object which has the items array in their.

35
00:03:00,320 --> 00:03:07,070
So what we could do with we assume that this is the case could create a new constant card product and

36
00:03:07,070 --> 00:03:17,210
then use this current items and find let's say the index of a product in that card with the same idea

37
00:03:17,210 --> 00:03:19,370
as the product we're trying to add again.

38
00:03:20,240 --> 00:03:28,100
So all has a function to find index which simply is a function javascript will execute for every element

39
00:03:28,130 --> 00:03:29,470
in the items array.

40
00:03:29,700 --> 00:03:34,670
And then here I want to return true if found derived product in my items array and this will be the

41
00:03:34,670 --> 00:03:37,570
case if C.P which is the product in the items array.

42
00:03:37,640 --> 00:03:45,260
If the underscore ID there matches the underscore ID of the product I'm trying to insert if that is

43
00:03:45,260 --> 00:03:46,200
the case.

44
00:03:46,300 --> 00:03:51,230
So if this returns a valid index for something else than minus one which would be the default Oberweis

45
00:03:51,680 --> 00:03:57,370
then I know this product already exists in a cart and then I just need to find out what its quantity

46
00:03:57,370 --> 00:03:58,400
is.

47
00:03:58,430 --> 00:03:59,980
Now we'll do this a second step.

48
00:03:59,990 --> 00:04:05,150
First of all we can assume that there will be no products in the cards because we're just starting from

49
00:04:05,150 --> 00:04:05,650
scratch.

50
00:04:05,780 --> 00:04:10,780
So let's add the code to add a product without checking whether that product exists yet.

51
00:04:10,850 --> 00:04:17,470
So we can call this out for now and it's a constant Maybe named updated cart.

52
00:04:18,340 --> 00:04:27,640
Which is an object where we might have items property which is an array where I will now include my

53
00:04:27,640 --> 00:04:28,640
product.

54
00:04:28,720 --> 00:04:31,460
However not just a product as I'm getting here.

55
00:04:31,570 --> 00:04:39,480
I also want to add a quantity field so I'll actually say product quantity and does this how you can

56
00:04:39,480 --> 00:04:46,710
add a field on the fly and Javascript equals one now and never approach maybe a bit more elegant than

57
00:04:46,710 --> 00:04:53,160
that is that in items you create the object with curly braces because we'll add an object here and then

58
00:04:53,160 --> 00:04:59,940
you use the javascript spread operator free dots to pull out all properties off this object so if the

59
00:04:59,940 --> 00:05:05,460
product object and then with a comma you can add or overwrite a property.

60
00:05:05,490 --> 00:05:09,400
So here I'll add the quantity property instead of 2:01.

61
00:05:09,720 --> 00:05:15,510
Whatever approach you choose this will create an object which holds an item property which is an array

62
00:05:15,630 --> 00:05:16,050
off.

63
00:05:16,050 --> 00:05:22,710
In our case only one object one product with an additional quantity information and now I want to update

64
00:05:22,740 --> 00:05:26,740
the user to store that card in there.

65
00:05:26,940 --> 00:05:35,920
So I will get access to my database with gets D.B and I'll reach out to my users collection and I'll

66
00:05:35,980 --> 00:05:41,190
update one user in there and I'll update the user with this user ID here.

67
00:05:41,320 --> 00:05:45,920
So what I need to do is I need to accept debt ID as an argument.

68
00:05:46,070 --> 00:05:53,770
So this underscore ID will be equal to ID lets say and then here I can say I want to find the user where

69
00:05:53,780 --> 00:06:02,150
underscore ID is equal to new and they all use object ID which I extracted up here because I need dead

70
00:06:02,150 --> 00:06:03,360
for the comparison.

71
00:06:04,440 --> 00:06:07,600
Where does equal to this underscore ID.

72
00:06:07,750 --> 00:06:13,850
And once I found that all describe how to update Knol use dollar signs set where I pass an object which

73
00:06:13,850 --> 00:06:18,290
holds all the information about which field to update in which way.

74
00:06:18,830 --> 00:06:26,480
And here I essentially want to keep everything as it is I dont want to change to user name or anything

75
00:06:26,480 --> 00:06:27,260
like that.

76
00:06:27,290 --> 00:06:31,250
I'll just set cart equal to update that cart that is it.

77
00:06:31,400 --> 00:06:38,460
So card which I expect to have in a user in the database will now receive updated card.

78
00:06:38,480 --> 00:06:43,670
So this object as a new value which will overwrites the old one and this is important.

79
00:06:43,700 --> 00:06:49,110
It will not merges with the old one it will not merged the elements in the items array it will simply

80
00:06:49,130 --> 00:06:51,760
override the old card with the new cart.

81
00:06:52,910 --> 00:06:59,920
It can return this year to update one call and what it should do is well it should update our user to

82
00:07:00,010 --> 00:07:01,420
add a product to the card.

83
00:07:01,450 --> 00:07:06,390
For now it will always overwrite any existing products and a card will fix it later.

84
00:07:06,520 --> 00:07:08,550
But for now this should work.

85
00:07:08,560 --> 00:07:10,570
Now lets wire it up in the next lecture.

