1
00:00:02,620 --> 00:00:04,910
We have to create user schema.

2
00:00:04,930 --> 00:00:11,350
Let's now work on the resolver that allows us to create a user for Dad and the resolvers file all as

3
00:00:11,770 --> 00:00:14,220
create user like that.

4
00:00:14,410 --> 00:00:17,700
And now here I actually get some arguments.

5
00:00:17,740 --> 00:00:21,130
You all do so in queries where you get data right away.

6
00:00:21,190 --> 00:00:26,290
There you could also get arguments for example when you want to retrieve a specific post with a specific

7
00:00:26,290 --> 00:00:27,180
ID.

8
00:00:27,350 --> 00:00:29,660
Here are my arguments are no post-paid either.

9
00:00:29,770 --> 00:00:31,490
But the user input data.

10
00:00:31,750 --> 00:00:34,900
My first argument there will be an R X object.

11
00:00:34,900 --> 00:00:38,940
There is a second argument available which is to request byte away.

12
00:00:39,070 --> 00:00:47,410
This will become important later now on the incoming Ark's object I can retrieve all the data I find

13
00:00:47,410 --> 00:00:48,240
in my schema.

14
00:00:48,340 --> 00:00:52,150
So email name and password that is my argument data.

15
00:00:52,180 --> 00:00:55,440
So that is what I can retrieve from the Ark's object.

16
00:00:55,570 --> 00:00:57,550
Not directly on the Ark's though.

17
00:00:57,550 --> 00:01:03,940
Instead our X will have a user input field because our X actually will be an object containing all the

18
00:01:03,940 --> 00:01:05,990
arguments passed to that function.

19
00:01:06,010 --> 00:01:08,050
Here it's only one but could be more.

20
00:01:08,170 --> 00:01:14,770
So args will have a user input field and then there will have email name and password so I can retrieve

21
00:01:14,770 --> 00:01:15,090
them.

22
00:01:15,100 --> 00:01:22,760
I can for example retrieve my email by typing R X user input because in my schema I named this field

23
00:01:22,760 --> 00:01:27,600
here user input and on the user input I can get the email.

24
00:01:27,700 --> 00:01:30,960
So Dot email like this.

25
00:01:31,050 --> 00:01:32,320
This is one option.

26
00:01:32,490 --> 00:01:39,330
We can all use destructuring to get user input out of my args object.

27
00:01:39,330 --> 00:01:45,880
And then the email will just be user input email.

28
00:01:45,890 --> 00:01:49,550
So a bit shorter now we'll use this in a second.

29
00:01:49,550 --> 00:01:52,860
First of all let's import the mongooses user model.

30
00:01:52,910 --> 00:01:55,400
Because I'll still interact with the database of course.

31
00:01:55,730 --> 00:02:06,490
So I will require model's user and then in here I want to use the async awaits syntax to use that I

32
00:02:06,490 --> 00:02:09,230
need to change the way I write this method.

33
00:02:09,430 --> 00:02:13,600
I add a colon after create user and use the function keyword.

34
00:02:13,600 --> 00:02:16,440
And now I can add async in front of that.

35
00:02:16,840 --> 00:02:20,310
So now I can use a single weight that is purely optional though.

36
00:02:20,380 --> 00:02:26,800
You could also use the normal then catch approach with your promises now and there.

37
00:02:26,860 --> 00:02:33,790
First of all I want to find out if that user already exists and for that I'll get an existing user by

38
00:02:33,790 --> 00:02:43,030
a waiting for a user find one where the email in the database matches the email entered in the user

39
00:02:43,030 --> 00:02:43,820
input.

40
00:02:44,200 --> 00:02:52,060
Now one super important note if you're not using a single weight you need to return your find one query

41
00:02:52,060 --> 00:02:57,250
which you're executing here where you'd then add then because if you don't return your promise in the

42
00:02:57,250 --> 00:03:03,970
resolver graph kill will not wait for it to resolve when using async wait it's automatically returned

43
00:03:03,970 --> 00:03:04,750
for you.

44
00:03:04,780 --> 00:03:07,520
We don't see the return statement here but it is there.

45
00:03:07,720 --> 00:03:09,240
So that is super important.

46
00:03:10,050 --> 00:03:16,450
So now I'm getting my existing user and if I have an existing user Well then I know I don't want to

47
00:03:16,450 --> 00:03:17,910
create a new one.

48
00:03:17,920 --> 00:03:29,540
So in this case I will create a new era or with a message of user exists already and I will throw dead

49
00:03:29,540 --> 00:03:34,900
error and I will come back to error handling and draft's you all in a later lecture.

50
00:03:35,540 --> 00:03:40,520
If I do you will have no existing user with that email address.

51
00:03:40,520 --> 00:03:46,280
Then I can continue with storing it and the logic for that is similar to the one in my off controller.

52
00:03:46,280 --> 00:03:49,760
We need to be tripped to hash to password.

53
00:03:49,760 --> 00:03:59,400
So in my Risaldar function here let me import be tripped at the top and then there we can use the hash

54
00:03:59,520 --> 00:04:08,180
method to hash the user input password with twelth salting round's.

55
00:04:08,190 --> 00:04:10,140
Now again I'll use async await your.

56
00:04:10,350 --> 00:04:15,690
So I'll get my hashed password eventually ofter awaiting waiting for days to finish.

57
00:04:16,780 --> 00:04:26,230
Now after I got that I can create a new user object and then that user object I will pass to email which

58
00:04:26,230 --> 00:04:33,010
is user input email I'll pass the name which is user input name.

59
00:04:33,050 --> 00:04:37,940
I'll also pass the password which is my hashed password.

60
00:04:37,970 --> 00:04:45,620
Now I need to save that to the database and I do care about the created user so all stored at stored

61
00:04:45,620 --> 00:04:55,420
or that created user are in a constant by a waiting for a user safe and that will just be returned at

62
00:04:55,600 --> 00:04:56,320
user object.

63
00:04:56,320 --> 00:05:04,440
It created now here finally I need to return some data and we see which data in our schema we need to

64
00:05:04,440 --> 00:05:05,790
return a user object.

65
00:05:08,160 --> 00:05:17,450
For that here I will return my created user underscore doc field which contains just user data without

66
00:05:17,480 --> 00:05:18,310
all the meta data.

67
00:05:18,320 --> 00:05:24,380
Mongoose would add our Weiss and it will override the underscore ID field by adding it as a separate

68
00:05:24,380 --> 00:05:28,930
property and therefore it will override the one I'm pulling out of.

69
00:05:29,000 --> 00:05:34,450
Underscore doc because I need to convert it from an object id field to a string field.

70
00:05:34,550 --> 00:05:36,230
Otherwise it will fail.

71
00:05:36,350 --> 00:05:43,210
So here I will access created user underscore ID and then call to string.

72
00:05:43,220 --> 00:05:44,490
This is not a user Optik.

73
00:05:44,520 --> 00:05:47,430
I'm returning when I'm creating a user.

74
00:05:47,560 --> 00:05:52,740
Now one important note before we actually tried an R fronted application.

75
00:05:53,140 --> 00:06:00,130
We can of course try that from inside postman but there is an even more convenient solution for testing

76
00:06:00,130 --> 00:06:02,830
this before I show you a solution.

77
00:06:02,830 --> 00:06:05,040
Let me first of all clean my database though.

78
00:06:05,110 --> 00:06:06,780
So did we start from scratch.

79
00:06:07,000 --> 00:06:11,850
And for that I'll delete both my posts and my users collection here.

80
00:06:12,010 --> 00:06:14,040
It will be created on the fly again.

81
00:06:14,050 --> 00:06:19,730
Once I got data to enter and I simply want to remove all entries I have thus far.

82
00:06:19,780 --> 00:06:21,510
So now I have to clean database.

83
00:06:21,550 --> 00:06:27,550
Let me show you that simpler approach am referring to to test does mutation.

84
00:06:27,550 --> 00:06:34,920
I can go back to aperture Yes on the back end code and there where I register or set up my graphical

85
00:06:35,000 --> 00:06:38,940
endpoint besides setting the schema and root value.

86
00:06:38,950 --> 00:06:44,590
You can also set graphical written graph IQ L to true.

87
00:06:44,920 --> 00:06:50,080
This gives you a special tool and this is the reason why I'm not listening for a post requests only

88
00:06:50,080 --> 00:06:53,720
here because now with your running server.

89
00:06:53,890 --> 00:07:00,910
Try visiting local host 880 slash RAF to L and this will send a get request if you enter something in

90
00:07:00,910 --> 00:07:06,940
the browser here here you sent a get request and you will get this screen which allows you to play around

91
00:07:06,940 --> 00:07:08,790
with your graphical API.

92
00:07:09,070 --> 00:07:17,040
Now if you go back to your back end to the schema quickly add a query again to your schema your root

93
00:07:17,530 --> 00:07:18,010
query

94
00:07:20,680 --> 00:07:27,350
creates data types your real quick and then there just at that how low again like this.

95
00:07:27,350 --> 00:07:28,730
We don't need to resolve for dead.

96
00:07:28,730 --> 00:07:30,220
We just did that query.

97
00:07:30,380 --> 00:07:36,410
Now if you reload your graphical interface you actually have that documentation on it right here where

98
00:07:36,410 --> 00:07:42,290
you see the operations you can do but you need to have a query defined for that even if it leads into

99
00:07:42,290 --> 00:07:43,280
the white.

100
00:07:43,340 --> 00:07:50,030
And there you can click onto it to see which mutations you have which data you need to send and so on

101
00:07:50,510 --> 00:07:52,320
and you can not just explored it here.

102
00:07:52,340 --> 00:07:58,770
You can even send your data so any year you can now create a new mutation about hyping M-E you and you

103
00:07:58,770 --> 00:08:01,130
will even get all the completion.

104
00:08:01,130 --> 00:08:04,910
Then curly braces and now with control space.

105
00:08:05,010 --> 00:08:09,840
You even get suggestions if you have more than one object will not be filled in automatically but you'll

106
00:08:09,860 --> 00:08:11,510
get a dropdown instead.

107
00:08:11,510 --> 00:08:15,270
You get suggestions for what you can run and here you now.

108
00:08:15,280 --> 00:08:20,660
This needs a user input then a colon and then an object that contains the user input data.

109
00:08:20,960 --> 00:08:25,150
And there you see we need that email wrapped in double quotation marks.

110
00:08:25,150 --> 00:08:26,060
Test test.

111
00:08:26,060 --> 00:08:36,060
Com we let's say need a name that could be max and we need the password and that is testor and there

112
00:08:36,080 --> 00:08:38,010
after we add a pair of curly braces.

113
00:08:38,120 --> 00:08:43,220
And now we can find the data we want to return offered as cories done with control space.

114
00:08:43,220 --> 00:08:44,400
We get some suggestions.

115
00:08:44,450 --> 00:08:51,860
I liked the idea that was generated or email and now you can run this query by pressing that play button

116
00:08:51,860 --> 00:08:54,500
up there or hitting control enter.

117
00:08:54,510 --> 00:08:56,180
You also see the commands here.

118
00:08:57,780 --> 00:09:01,180
And this will now execute it and it seemed to have succeeded.

119
00:09:01,380 --> 00:09:07,290
You see the idea of the created user and to email and if you go back to Mangieri become pass and you

120
00:09:07,320 --> 00:09:08,250
refreshed it.

121
00:09:08,250 --> 00:09:14,470
Here you should have the users collection back and you see the user in there with the hashed password.

122
00:09:14,550 --> 00:09:20,700
So this is a great tool for playing around battered and postman because you got this nice interactive

123
00:09:20,700 --> 00:09:22,860
support with the auto completion.

124
00:09:22,890 --> 00:09:29,310
You've got the documentation here and you can test your graphical query in this tool in a really nice

125
00:09:29,310 --> 00:09:29,980
way.

126
00:09:30,360 --> 00:09:37,550
And now with that let's see how we can enhance this for example by adding validation before we then

127
00:09:37,560 --> 00:09:40,200
also connect our front end application of course.

