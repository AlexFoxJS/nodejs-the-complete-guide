1
00:00:02,390 --> 00:00:04,720
How does uploading data work.

2
00:00:04,720 --> 00:00:09,530
Now the thing is graphed you l only works with Jason data.

3
00:00:09,830 --> 00:00:18,090
You can find a couple of articles third party packages that help you with getting data fruit graph QOL.

4
00:00:18,320 --> 00:00:24,980
But in the end one of the cleanest solutions is to use a classic and point like a rest and point where

5
00:00:24,980 --> 00:00:32,870
you send your image to and then let dat endpoint store the image and return the POV to the image and

6
00:00:32,870 --> 00:00:39,260
then send another request with that poverty image and you are Obert data to your graphics you Allen

7
00:00:39,260 --> 00:00:44,260
point and dessous disillusion I'll implement here I'll implement that an app.

8
00:00:44,390 --> 00:00:47,660
S because you could outsource this into a separate file.

9
00:00:47,680 --> 00:00:51,020
But it'll be the only route we add here and there.

10
00:00:51,020 --> 00:00:57,470
I'll register a new route on my app for incoming put requests because I plan to send an image with a

11
00:00:57,470 --> 00:00:59,950
put request to slash.

12
00:01:00,080 --> 00:01:02,330
Let's say post image.

13
00:01:02,330 --> 00:01:04,940
You can name this pov however you want.

14
00:01:04,940 --> 00:01:08,360
There we have our traditional middleware function.

15
00:01:08,360 --> 00:01:13,880
I hope you still know that even though we haven't used it in the last lectures and they're all first

16
00:01:13,880 --> 00:01:16,430
of all check if we don't have a file.

17
00:01:16,490 --> 00:01:18,050
Now how can I check that.

18
00:01:18,340 --> 00:01:20,520
Well I still have mulcher in place.

19
00:01:20,600 --> 00:01:27,440
We added that and arrest API module and Malta is the package which takes our multipart foreign data

20
00:01:27,500 --> 00:01:34,940
requests and extracts a file and stores it in the image folder and they still have that in place.

21
00:01:34,940 --> 00:01:41,810
So all my files still will be extracted and mulcher then populates the file object with information

22
00:01:41,810 --> 00:01:43,950
about the extract that file.

23
00:01:43,950 --> 00:01:54,500
Now if this is not set then I'll just return a response here with the status of 200 and a message where

24
00:01:54,500 --> 00:01:59,930
I say no fall provided you could set an error code here.

25
00:01:59,940 --> 00:02:07,350
But actually this scenario is fine for me as you will see when we later edit a post because there we

26
00:02:07,350 --> 00:02:09,960
might or might not add a new image.

27
00:02:09,960 --> 00:02:11,520
Maybe we stick to the old one.

28
00:02:11,580 --> 00:02:13,410
Maybe we did choose a new one.

29
00:02:13,530 --> 00:02:16,710
And then this is one way of handling both cases.

30
00:02:16,710 --> 00:02:20,440
If we do ever request fall we can get some data from it though.

31
00:02:20,610 --> 00:02:28,160
And of course we want a clear and existing image if there is one for that I'll create a new function

32
00:02:28,160 --> 00:02:28,490
here.

33
00:02:28,520 --> 00:02:30,850
Or actually I have that function the feet.

34
00:02:30,860 --> 00:02:38,200
J.S. controller already I can copy that from there the clear image function at the bottom of the feet

35
00:02:38,220 --> 00:02:39,470
to file.

36
00:02:39,590 --> 00:02:41,010
I'll move that into aperture.

37
00:02:41,030 --> 00:02:49,430
Yes this depends on the F package and on the POF package the POF module lbf is already imported.

38
00:02:49,520 --> 00:02:55,210
Now also import F here and now with that all imported

39
00:02:58,550 --> 00:03:01,050
back in our port request here.

40
00:03:01,400 --> 00:03:08,120
I'll check for the existence of a body field which is named old Poth which simply means that an old

41
00:03:08,120 --> 00:03:16,240
port was passed with the incoming request in which case I want to clear my old image and I'll pass in

42
00:03:16,250 --> 00:03:21,080
the old Poth because then we added a new image.

43
00:03:21,080 --> 00:03:22,470
We can be certain about that.

44
00:03:22,490 --> 00:03:28,970
After does it check and then we should all have an old POF which we delete so that we don't keep the

45
00:03:28,970 --> 00:03:30,320
old image and a new image.

46
00:03:30,380 --> 00:03:36,410
Instead we delete the old image here and then only keep the new image which was stored by Mulder and

47
00:03:36,410 --> 00:03:39,110
then at the end here I will return a response.

48
00:03:39,850 --> 00:03:45,940
With a status code of 201 and that data differs differentiates it from this response.

49
00:03:45,940 --> 00:03:52,930
And here I will add some adjacent data lets say a message file stored.

50
00:03:52,950 --> 00:03:59,760
But more importantly I'll add a file Paul for however you want to name it which is request file path

51
00:03:59,880 --> 00:04:02,720
and this is the path where milters stored the image.

52
00:04:02,730 --> 00:04:07,680
And this is the lbf we can then use the front end with this added on the back.

53
00:04:07,890 --> 00:04:14,220
We can now work on the front end to use Does rest API endpoint and this also shows you that you can

54
00:04:14,220 --> 00:04:17,810
use rest and graft you all concepts together.

55
00:04:17,820 --> 00:04:20,650
It's not like a hard decision you have to make.

56
00:04:20,670 --> 00:04:24,260
You can use the best for a given problem.

57
00:04:24,270 --> 00:04:30,740
So now we can use that on the front end and we want to use it in this finish added handler.

58
00:04:30,990 --> 00:04:36,640
So the feat J.S. followed through re-act app in the finish edit handler there.

59
00:04:36,650 --> 00:04:43,230
I'm preparing some foreign data and does foreign data does not get a Tideland content anymore but it

60
00:04:43,230 --> 00:04:45,250
would still get D-Mich..

61
00:04:45,480 --> 00:04:51,640
Additionally though I also want to check if we are in edit mode.

62
00:04:51,810 --> 00:05:03,970
So if this state added post if that is true and then I will append the old PAF field which is this state

63
00:05:04,660 --> 00:05:13,850
added post which is supposed to we're currently editing image.

64
00:05:13,870 --> 00:05:19,690
This is a field where setting when we're loading all those there when be load posts.

65
00:05:19,760 --> 00:05:24,460
We all set the image Poth and there is a field which today for all ages should set.

66
00:05:24,500 --> 00:05:28,160
When we added our posts so there when they create a new post

67
00:05:31,210 --> 00:05:39,740
I also add image Pasquier gets that from Create post that should be my image.

68
00:05:39,750 --> 00:05:46,740
You are Ellwood to get there and that is all something I need to request therefore for sure L is something

69
00:05:46,740 --> 00:05:49,130
I do request here so I do have that available.

70
00:05:49,500 --> 00:05:52,200
So I'm setting this image Poth I have that available.

71
00:05:52,200 --> 00:05:54,000
This will be the POV of D.

72
00:05:54,150 --> 00:06:01,320
Well the old image on the server and now with that I have left for data set up.

73
00:06:01,450 --> 00:06:04,140
Now before I sent my graph Q L query.

74
00:06:04,390 --> 00:06:10,080
I will therefore send a number query to HTP localhost 88.

75
00:06:10,690 --> 00:06:12,820
But there are two slash post image.

76
00:06:12,850 --> 00:06:20,530
So to this new endpoint I find and that the method here will be put because on my back and here I simply

77
00:06:20,530 --> 00:06:26,650
defined this to handle put requests you could of course also argue to use post but since I'll replace

78
00:06:26,650 --> 00:06:29,850
the old image put makes a lot of sense.

79
00:06:29,860 --> 00:06:32,020
I'll then add my headers.

80
00:06:32,020 --> 00:06:41,050
Now regarding offer I sation here we want to make sure that our off middleware actually runs first on

81
00:06:41,050 --> 00:06:44,560
the server so that we know if the user is offene credit.

82
00:06:44,650 --> 00:07:01,520
And if is off is false then we can certainly fro new error here not authenticated so that we protect

83
00:07:01,540 --> 00:07:03,040
does route as well.

84
00:07:03,340 --> 00:07:09,640
So now on the front end we need to add our offerings sation header and now we'll just copy the headers

85
00:07:09,910 --> 00:07:15,870
from my graft you all request because the headers actually are the same and the body is now here.

86
00:07:15,880 --> 00:07:21,840
My forum data does fetch request will be made first.

87
00:07:22,040 --> 00:07:29,570
Then after it has been made I'll get back a response some produce some response data.

88
00:07:29,580 --> 00:07:36,390
Well PA-RISC the body and there ofter I'll have my file response data.

89
00:07:36,400 --> 00:07:37,830
You can named it however you want.

90
00:07:37,960 --> 00:07:48,000
And in here I now can extract the image you are el by accessing file response data and their file path.

91
00:07:48,080 --> 00:07:58,110
Because in my end point I am setting this file path key here and I can now use that in the graph queue

92
00:07:58,310 --> 00:08:03,250
El-Khodary So now let me grab all that graph.

93
00:08:03,250 --> 00:08:11,120
Q L cosier this code up to the then block caught it and move it into this then block and then remove

94
00:08:11,150 --> 00:08:13,870
this semi-colon and change this then block.

95
00:08:13,870 --> 00:08:20,770
Here I just need to return dispatch call so that the next then block refers to the result of this fetch

96
00:08:21,040 --> 00:08:21,760
block here.

97
00:08:22,760 --> 00:08:26,370
So now I do have my image you are l.

98
00:08:26,390 --> 00:08:31,970
Now I just need to pass a tear for my graph Q quarry image.

99
00:08:32,080 --> 00:08:39,740
You are L and now we should have a set up where we are able for now to at least create new posts.

100
00:08:39,740 --> 00:08:42,120
Editing is something we'll work on later.

101
00:08:42,650 --> 00:08:44,040
So let's try that out.

102
00:08:44,120 --> 00:08:45,570
Let's try creating a new post.

103
00:08:45,590 --> 00:08:51,740
And first of all on the server I'll clear all the images in the images folder so that we can tell whether

104
00:08:51,740 --> 00:08:53,140
this works or not.

105
00:08:53,540 --> 00:08:56,470
So back here I need to log in again.

106
00:08:56,470 --> 00:08:57,750
Let's quickly do that.

107
00:08:59,030 --> 00:09:04,190
And let's create you duck and you post but it can be a duck a duck with an image.

108
00:09:04,200 --> 00:09:08,080
Hopefully Let's choose our deck shape.

109
00:09:08,340 --> 00:09:16,790
This is a lovely duck again accept and I get this error regarding payload to lurch.

110
00:09:16,800 --> 00:09:23,520
This is actually coming from an error on my side that Vetri Quest here where I send to post image I

111
00:09:23,520 --> 00:09:26,130
should not set the content type to application Jason.

112
00:09:26,130 --> 00:09:31,730
There are wise it will be parsed as data and that does not work for my binary data here.

113
00:09:31,920 --> 00:09:34,220
So after removing this header.

114
00:09:34,590 --> 00:09:39,420
Let's try this again with another duck here.

115
00:09:40,950 --> 00:09:42,480
Add that image.

116
00:09:42,480 --> 00:09:49,510
So Levalley except this and now it uploads this first and we can prove that by looking two images.

117
00:09:49,550 --> 00:09:51,120
Here is our doc image.

118
00:09:51,180 --> 00:09:55,210
So this works and it still creates that post which we can see here.

119
00:09:55,230 --> 00:10:02,230
Next challenge is to make sure that we can click View button and view the detail page for one post.

120
00:10:02,250 --> 00:10:08,940
And this again is a challenge for you implement something some schema or a query in the schema of your

121
00:10:08,940 --> 00:10:16,910
graph Q L API and add to resolder that takes the ID of a post and Lote's that post.

122
00:10:17,070 --> 00:10:20,320
You can then work on the front end too if you feel bold.

123
00:10:20,400 --> 00:10:24,640
Otherwise focus on the back and we'll do it together in the next lecture.

