1
00:00:02,280 --> 00:00:08,670
So in the last lecture we added a script to start our application and does it's nice to note and we

2
00:00:08,670 --> 00:00:14,880
have this scripting functionality now with such a package Jason fall away level.

3
00:00:14,910 --> 00:00:22,770
So therefore with this being managed node project you could say we can also do one very important thing

4
00:00:23,160 --> 00:00:32,670
we can install third party packages because a typical node project looks like that you have your local

5
00:00:32,670 --> 00:00:39,580
project with your code obviously and you use a lot of core node packages like DFS package or D.H. to

6
00:00:39,590 --> 00:00:41,350
DP package we're already using.

7
00:00:41,670 --> 00:00:43,710
But often this does not suffice.

8
00:00:43,830 --> 00:00:49,920
And in the next core section we will install one big party package actually because you typically have

9
00:00:49,920 --> 00:00:52,890
such dependencies third party packages.

10
00:00:52,890 --> 00:00:57,880
So you want to use some functionalities some code which you didn't write on your own but which is also

11
00:00:57,900 --> 00:01:05,120
not included into no chase packages could help you with parsing incoming requests validating user input.

12
00:01:05,190 --> 00:01:07,200
Anything of that kind.

13
00:01:07,200 --> 00:01:14,050
Now we will use Express in the next lectures or in the next module be precise body parser is another

14
00:01:14,110 --> 00:01:19,740
package we'll use for all this cores and there are thousands of packages a way lable that offer all

15
00:01:19,740 --> 00:01:22,460
kinds of utilities you can add to your projects.

16
00:01:22,470 --> 00:01:25,230
So did you don't have to reinvent the wheel.

17
00:01:25,230 --> 00:01:29,040
These packages are available from the NPM repository.

18
00:01:29,040 --> 00:01:32,910
That is a cloud packet repository where all these packages live.

19
00:01:33,120 --> 00:01:36,930
And you can conveniently install and manage them via NPM.

20
00:01:37,050 --> 00:01:43,020
Remember that tool that shipped with note and this is exactly what we will do now to install a first

21
00:01:43,020 --> 00:01:47,270
little utility package that will speed up our development workflow.

22
00:01:47,850 --> 00:01:53,250
Because right now what we have to do is whenever we change our code we have to quit the development

23
00:01:53,250 --> 00:01:55,730
server with Control-C and restart it.

24
00:01:55,770 --> 00:01:56,190
Right.

25
00:01:56,310 --> 00:02:01,640
So if we have it running with NPM start now remember it is our new command to start the server.

26
00:02:01,860 --> 00:02:06,960
And I would change something here like for example here I fixed that slash head right.

27
00:02:06,960 --> 00:02:12,420
Whenever I do this I have to save this and for my change to have an effect I have to quit the server

28
00:02:12,420 --> 00:02:14,880
with Control-C and restarted.

29
00:02:14,880 --> 00:02:19,520
Now it is a bit cumbersome because we just want to be able to type and then hit save.

30
00:02:19,590 --> 00:02:25,470
And it should automatically restart and right that would be a great workflow during development and

31
00:02:25,500 --> 00:02:31,800
to achieve this we have to install a third party package that gives us just as functionality.

32
00:02:31,860 --> 00:02:34,810
Now how do we add such a third party package.

33
00:02:34,890 --> 00:02:39,560
We do that with the help of NPM and there we get the install command.

34
00:02:39,570 --> 00:02:45,720
So just as we had run to run one of our scripts install installs a third party package.

35
00:02:45,720 --> 00:02:47,880
Now how do we install it.

36
00:02:47,880 --> 00:02:50,190
First of all we have to know the package name.

37
00:02:50,190 --> 00:02:53,110
And if you're wondering well how do I know the package name.

38
00:02:53,250 --> 00:02:59,090
Well that comes with Courcelles like this experience or by simply googling for certain problems which

39
00:02:59,100 --> 00:03:03,230
you want to have solved and all the Zohn you find to read where some package is mentioned.

40
00:03:03,510 --> 00:03:06,470
Now I can tell you for does auto restart mechanism.

41
00:03:06,570 --> 00:03:09,870
There is a package called Node 1 written like this.

42
00:03:09,870 --> 00:03:17,860
By the way you can always search for NPM and then the package name if you know that name and you will

43
00:03:17,860 --> 00:03:21,070
find an entry on NPM Chaske dot com.

44
00:03:21,070 --> 00:03:28,240
Now it is just the package page basically where you find a description installation instructions usage

45
00:03:28,240 --> 00:03:33,880
instructions how to configure it because most package has give you a easy way of using it and then always

46
00:03:33,880 --> 00:03:36,310
give you configuration possibilities.

47
00:03:36,400 --> 00:03:38,200
You'll see how popular the package is.

48
00:03:38,200 --> 00:03:44,260
What's worse it's using if there is an extra little home page where the source code can be found if

49
00:03:44,260 --> 00:03:45,340
it's open source.

50
00:03:45,340 --> 00:03:48,340
So you find a bunch of stuff here pretty useful.

51
00:03:48,340 --> 00:03:50,800
You also see how many words are existing.

52
00:03:50,920 --> 00:03:54,610
And by default you will always install the latest version by the way.

53
00:03:54,610 --> 00:03:56,560
But let's go back to installing it.

54
00:03:56,560 --> 00:03:59,070
Before we dive deeper into this whole NPM thing.

55
00:03:59,380 --> 00:04:02,830
So we want to install it and this command would install it.

56
00:04:02,950 --> 00:04:05,230
But don't hit enter yet.

57
00:04:05,320 --> 00:04:13,900
You can define how it should be installed because packages which you install can be divided into development

58
00:04:13,900 --> 00:04:20,500
packages so packages which are mostly help you during development and production dependencies.

59
00:04:20,500 --> 00:04:27,340
So Pecka chest it helps you for the app as it's running on a server for example node Mohn would be a

60
00:04:27,340 --> 00:04:31,490
development dependency because we only use it during the development process.

61
00:04:31,600 --> 00:04:35,320
Once we install our app on a real server we don't need it there.

62
00:04:35,350 --> 00:04:39,880
The real server which is running somewhere in the Internet of course shouldn't restart.

63
00:04:39,880 --> 00:04:44,180
And it also doesn't have to because will not change its code dynamically.

64
00:04:44,870 --> 00:04:51,150
And you can basically tell NPM which kind of dependency this is just does not make a huge difference

65
00:04:51,150 --> 00:04:58,080
and you can omit the setting but it helps you understand which package is used for what now you do this

66
00:04:58,080 --> 00:05:01,760
by adding dash dash safe dash death.

67
00:05:01,920 --> 00:05:07,260
If you had just save like this does would install it as a production dependency.

68
00:05:07,260 --> 00:05:13,290
So a package which we really use and use in our code and work with and with does we're indicating that

69
00:05:13,340 --> 00:05:17,390
this is only at something we used during development.

70
00:05:17,430 --> 00:05:19,350
There is a third option by the way.

71
00:05:19,350 --> 00:05:24,690
Dash G will not install it in this project but Clovelly on your machine.

72
00:05:24,750 --> 00:05:27,280
So did you can use it anywhere.

73
00:05:27,290 --> 00:05:33,530
Now let's first of all install it with save death like this dash dash safe dash death.

74
00:05:33,540 --> 00:05:40,660
Now what this will do is it will downloaded from any member of Pozza Tory and install it into this project.

75
00:05:40,710 --> 00:05:44,780
So not globally on your machine but into this project.

76
00:05:45,180 --> 00:05:51,450
So now you see you get a report here that it finished successfully what it did and it gives you a couple

77
00:05:51,450 --> 00:05:53,400
of new things in your project.

78
00:05:53,400 --> 00:05:59,970
It gives you that node modules full or the package lock Jason file and it updated the package up Jason

79
00:05:59,970 --> 00:06:00,600
fall.

80
00:06:00,900 --> 00:06:06,450
There we see that the new def the pendency section was at it and that stands for development dependencies.

81
00:06:06,540 --> 00:06:10,060
As I said you can differentiate between different dependencies.

82
00:06:10,140 --> 00:06:12,560
We'll see production dependencies later too.

83
00:06:12,990 --> 00:06:17,290
And there you see that gnomon was installed and which version was picked.

84
00:06:17,290 --> 00:06:19,720
Now regarding that character here.

85
00:06:19,890 --> 00:06:23,610
Well this basically defines how this package will be updated.

86
00:06:23,850 --> 00:06:31,110
If you rerun just NPM install without defining an extra package name because this command stand alone

87
00:06:31,320 --> 00:06:37,770
will simply go for all your packages mentioned in package deal Jason and install them and it would automatically

88
00:06:37,770 --> 00:06:39,690
pick a later version if available.

89
00:06:39,810 --> 00:06:43,710
But more on NPM and packages can all be found in a separate module.

90
00:06:43,770 --> 00:06:45,110
Later in the course.

91
00:06:45,390 --> 00:06:48,030
So this is basically how we now install this.

92
00:06:48,150 --> 00:06:50,650
And the question is Where is it installed.

93
00:06:50,850 --> 00:06:52,880
Well that is the node modules folder.

94
00:06:52,980 --> 00:06:57,690
And actually that is a huge folder as you can tell the reason for it is this dead.

95
00:06:57,690 --> 00:06:59,870
For one we got node Mohn in there.

96
00:07:00,000 --> 00:07:04,250
If we look for and we see it here.

97
00:07:04,440 --> 00:07:09,630
Now this is basically the source code of the package or the belt weren't off the package we installed

98
00:07:10,320 --> 00:07:15,000
and does package simply happens to have a couple of peer dependencies.

99
00:07:15,060 --> 00:07:17,260
You can see them here and here.

100
00:07:17,310 --> 00:07:22,920
So we got a bunch of dependencies in there and Ds and their dependencies are all installed.

101
00:07:22,920 --> 00:07:29,010
That is why you could end up with quite a big node modules folder but you can always delete that node

102
00:07:29,010 --> 00:07:31,600
modules folder if you need to free up space.

103
00:07:31,620 --> 00:07:37,380
Now you can use that package but you can then rerun and install if you start working on that project

104
00:07:37,380 --> 00:07:43,290
again and it will re-install this package and all its pure dependencies and therefore recreate the node

105
00:07:43,290 --> 00:07:44,370
modules folder.

106
00:07:44,550 --> 00:07:47,640
This is how packages work in node projects.

107
00:07:47,640 --> 00:07:52,530
So you need that node Marshall's folder was still using the packages but if youre not working on the

108
00:07:52,530 --> 00:07:58,020
project you can delete it if you want if you need the free space and then just remember to rerun NPM

109
00:07:58,030 --> 00:08:00,960
install once you are working on the project again.

110
00:08:01,410 --> 00:08:09,360
The package lock Jason File by the way just stores to exact weapons I installed today so that if you

111
00:08:09,360 --> 00:08:15,130
share your project with honors they can actually get these exact words to instead of the latest versions.

112
00:08:15,150 --> 00:08:18,140
But again more on and PM in a separate module.

