1
00:00:02,230 --> 00:00:04,630
To ensure that we can also delete posts.

2
00:00:04,720 --> 00:00:09,640
Let's start our node rest project and add a new route.

3
00:00:09,700 --> 00:00:13,260
This will be a daily draw using the delete HTP method.

4
00:00:13,450 --> 00:00:18,130
We register such a route by using Routier dot delete.

5
00:00:18,170 --> 00:00:26,090
Now here the payoff will be slash post slash colon post ID Florida leads route's you can send up body.

6
00:00:26,210 --> 00:00:30,980
But as with all routes you can of course encode data into d you r else.

7
00:00:31,010 --> 00:00:32,350
And as is what I'm doing here.

8
00:00:33,760 --> 00:00:35,410
Now the route is one thing.

9
00:00:35,410 --> 00:00:38,320
Obviously we all need a control or action.

10
00:00:38,400 --> 00:00:44,410
So let's go back to our feet controller and before a clear image I'll export my new action which I'll

11
00:00:44,410 --> 00:00:52,130
add which will be my delete action so I'll name it delete post-tour will be my standard middleware with

12
00:00:52,130 --> 00:00:55,050
DS free arguments being passed to the function.

13
00:00:55,330 --> 00:01:02,080
And then there are first of all extract the post ID from my request parens as we did it multiple times

14
00:01:02,080 --> 00:01:03,540
for the course.

15
00:01:03,970 --> 00:01:11,740
Then we can use to post model to find a post by ID and that will be my post with this idea of course.

16
00:01:12,780 --> 00:01:15,450
Now why would I find it by ID first.

17
00:01:15,480 --> 00:01:19,920
I can of course also use Post find by id and remove.

18
00:01:20,310 --> 00:01:26,940
Well I will use this eventually but later once we added a user I want to verify whether dead user created

19
00:01:26,940 --> 00:01:29,010
the post before I delete it.

20
00:01:29,030 --> 00:01:36,950
Simple First of all find the post with success or not and if I have an error I'll use that old error

21
00:01:36,950 --> 00:01:40,350
handling code I had before and then block.

22
00:01:40,550 --> 00:01:47,740
I'll have my post where I will check whether the creator is currently locked in user so check.

23
00:01:47,810 --> 00:01:49,140
Locked in user.

24
00:01:49,150 --> 00:01:53,390
This is something I can't do yet because we have no locked end user obviously.

25
00:01:53,420 --> 00:01:55,660
For now there is one thing I can do though.

26
00:01:55,790 --> 00:02:01,790
I can use clear image to access to post I retrieved and delete the image for the image yourself that

27
00:02:01,790 --> 00:02:03,100
is stored there.

28
00:02:03,110 --> 00:02:08,210
There is one other thing I actually should do and that is I should check whether that post exists so

29
00:02:08,210 --> 00:02:12,740
I can copy that logic from up there where I see never post as on the find.

30
00:02:12,830 --> 00:02:15,630
And if it is on the find I fell in error.

31
00:02:16,100 --> 00:02:24,530
Now if that's X-C that I delete the post image and then I return post find my ID and remove because

32
00:02:24,530 --> 00:02:26,100
now I will remove it.

33
00:02:26,220 --> 00:02:28,400
And here I passed my posts ID again.

34
00:02:29,180 --> 00:02:33,280
I can add one more then block with the result of that operation.

35
00:02:33,440 --> 00:02:39,650
And then here all know whatever that succeed it and most importantly I'll return with a status code

36
00:02:39,650 --> 00:02:48,250
of 200 which means yes we were successful and a Jasen data package where I will just say deleted post

37
00:02:48,360 --> 00:02:49,160
in a message.

38
00:02:49,160 --> 00:02:52,170
Of course you could send any data you want.

39
00:02:52,360 --> 00:02:58,900
So with that my delete post action is configured here in the controller back in my route.

40
00:02:58,930 --> 00:03:04,260
I can now use my feed controller delete post and assign it to to to delete route.

41
00:03:04,510 --> 00:03:09,640
And now we just need to work on the front end and hook up does route.

42
00:03:09,700 --> 00:03:11,240
So they're in the feet.

43
00:03:11,320 --> 00:03:14,040
J.S. fall which we worked on a lot already.

44
00:03:14,230 --> 00:03:17,440
You'll find a delete post handler in there.

45
00:03:17,440 --> 00:03:26,570
You simply need to update dead you are else use see in their so let's replace you r l with HTP localhost

46
00:03:26,800 --> 00:03:36,540
A-380 slash feet slash post slash and then post ID which is an argument we'll get in this function.

47
00:03:37,570 --> 00:03:40,770
Now important we want to send a delete request.

48
00:03:40,900 --> 00:03:48,580
So we need to pass a second argument to fetch here and set the method to delete and that is it for now.

49
00:03:48,580 --> 00:03:50,440
This should now send such a request.

50
00:03:50,440 --> 00:03:52,210
When we clicked the delete button.

51
00:03:52,360 --> 00:03:56,280
So make sure you save this and you back in code and thereafter.

52
00:03:56,320 --> 00:03:59,630
Let's go back to defeat and let's click delete.

53
00:03:59,640 --> 00:04:06,210
Maybe on the first item now after reloading it's gone here and the doc image was deleted as well.

54
00:04:07,250 --> 00:04:10,430
If I reload this app which also should not fetch it again.

55
00:04:10,460 --> 00:04:12,390
So it really seems to be gone.

56
00:04:12,500 --> 00:04:14,600
So now deleting all that works.

