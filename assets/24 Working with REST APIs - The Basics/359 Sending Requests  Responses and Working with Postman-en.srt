1
00:00:02,290 --> 00:00:07,110
So I did find my basic set up for and you know express rest API.

2
00:00:07,330 --> 00:00:13,590
We have our route and its controller and now of course we need to return some data there.

3
00:00:13,630 --> 00:00:20,830
So instead of the controller get posts we want to return some data because you learned rest if your

4
00:00:20,830 --> 00:00:22,810
eyes are all about data.

5
00:00:22,990 --> 00:00:29,290
We will not call rest render it in here because we will not render a view you will not see me call as

6
00:00:29,320 --> 00:00:35,940
render any more again because rest API is simply don't render the use because they don't return h tim

7
00:00:35,950 --> 00:00:44,020
L and it rendered the U is H.T. mail instead will do something we already saw in the async request module

8
00:00:44,050 --> 00:00:45,260
discourse.

9
00:00:45,370 --> 00:00:53,260
We will return a Jason response Jason as a method provided by express HHS that allows us to conveniently

10
00:00:53,260 --> 00:00:59,680
return a response with Jason data with the right headers being set and so on we can pass our normal

11
00:00:59,680 --> 00:01:06,690
javascript object to Jason and it will be called Word to Jason format and sent back as a response to

12
00:01:06,730 --> 00:01:09,100
the client who sent the request.

13
00:01:09,100 --> 00:01:15,580
And there we can send anything you want like post which could be an array of posts where we have a title

14
00:01:15,850 --> 00:01:18,460
first post and some content.

15
00:01:18,460 --> 00:01:21,450
This is the first post.

16
00:01:21,450 --> 00:01:23,230
And of course I'm just making up things here.

17
00:01:23,230 --> 00:01:25,360
This is of course just some dummy data.

18
00:01:25,690 --> 00:01:31,300
So we called Rest Jason and this will send a Jason response.

19
00:01:31,300 --> 00:01:35,770
Now when sending Jason responses we all want to send the status code explicitly.

20
00:01:35,950 --> 00:01:41,590
200 would be the default but will also work with different status codes for this module and we want

21
00:01:41,590 --> 00:01:43,720
to be clear about the status code.

22
00:01:43,750 --> 00:01:50,140
Our response has so did the client we have an easy way of handling it because you always have to remember

23
00:01:50,440 --> 00:01:57,640
that the client now has to render the user interface based on your response and therefore especially

24
00:01:57,730 --> 00:02:04,330
error codes are super important to pass back to the client so that the client can just have a look at

25
00:02:04,330 --> 00:02:06,560
the status code and find out.

26
00:02:06,670 --> 00:02:13,900
Should I rendered my normal user interface because the requests exceeded or did I get an error or.

27
00:02:14,010 --> 00:02:17,840
And I want to render an appropriate error interface.

28
00:02:18,170 --> 00:02:22,830
Previously Nicoise we sent the whole interface so the client didn't have to worry about that.

29
00:02:22,840 --> 00:02:24,240
Now the client has to.

30
00:02:24,300 --> 00:02:27,750
And therefore setting the right status code is important.

31
00:02:28,890 --> 00:02:35,280
Now with that we have some logic in place to return some dummy data with NPM start.

32
00:02:35,310 --> 00:02:39,760
We can now start up our server here and now we have it running.

33
00:02:39,900 --> 00:02:41,700
And now we can wisit a browser.

34
00:02:41,910 --> 00:02:48,450
And for now we can simply enter local host 1880s slash feed slash posts.

35
00:02:48,450 --> 00:02:53,090
So this path we defined and you should get some Jason data here.

36
00:02:53,190 --> 00:02:55,590
If you open your developer tools

37
00:02:59,320 --> 00:03:05,990
and you go to the network tab there and you reload that page you all see that request here.

38
00:03:06,020 --> 00:03:09,590
And if you inspect it you of course see the response body.

39
00:03:09,590 --> 00:03:15,620
But if you have a look at the headers you'll see that in the response headers we see that application

40
00:03:15,620 --> 00:03:23,210
Jason was set automatically by our server because we used to dat Jason Meffert and we indeed get back

41
00:03:23,210 --> 00:03:26,700
to conduct we find here we can see it here too.

42
00:03:26,750 --> 00:03:29,220
So this is a quick and easy way of testing this.

43
00:03:29,240 --> 00:03:32,420
Now obviously our users would never wisit it like this.

44
00:03:32,450 --> 00:03:36,040
They could if we don't require authentication at least.

45
00:03:36,260 --> 00:03:39,470
But this is of course not how we intend our API to be used.

46
00:03:39,590 --> 00:03:46,190
Instead we'll build a user interface that will then use this behind the scenes and render a beautiful

47
00:03:46,190 --> 00:03:49,030
UI automatically with that data.

48
00:03:49,070 --> 00:03:53,590
So directly accessing the data like this is of course not the plan.

49
00:03:53,990 --> 00:04:01,220
Now before I come back to the user interface part though let me show you how we can easily and conveniently

50
00:04:01,220 --> 00:04:05,680
test our arrest API even without entering this into the browser.

51
00:04:06,050 --> 00:04:07,460
And Ford Ed let me do something.

52
00:04:07,490 --> 00:04:09,080
You couldn't enter into the browser.

53
00:04:09,170 --> 00:04:11,640
Let's define a post round.

54
00:04:11,690 --> 00:04:17,090
So besides being able to get Polistes we typically would also have some routes that allow us to add

55
00:04:17,090 --> 00:04:18,380
new posts.

56
00:04:18,380 --> 00:04:29,000
Now if we quickly think about our different HTP methods then for posting new posts post would be a great

57
00:04:29,240 --> 00:04:30,260
HTP method.

58
00:04:30,260 --> 00:04:33,770
We could also use port that would not necessarily be wrong.

59
00:04:33,800 --> 00:04:40,190
Port would also be a valid method to be used for creating a resource but especially when we're talking

60
00:04:40,190 --> 00:04:45,200
about posts and not something like user data which only exists once but posts.

61
00:04:45,200 --> 00:04:51,170
There might be multiple posts and therefore adding or appending sounds good to me and hence I want to

62
00:04:51,170 --> 00:04:57,110
use the post method instead of put if we were to manage to user data here then maybe put might be better

63
00:04:57,170 --> 00:05:01,130
because there we need to create or write the resource.

64
00:05:01,430 --> 00:05:07,570
So post is and hence I will name this post post which sounds a bit strange.

65
00:05:07,610 --> 00:05:09,320
It's just my naming convention.

66
00:05:09,350 --> 00:05:14,720
I have DHP method first and then basically the object that's at gets created.

67
00:05:14,720 --> 00:05:16,240
You could name this totally different.

68
00:05:16,280 --> 00:05:20,980
You could named as create post if you want to.

69
00:05:21,200 --> 00:05:23,580
Let's maybe name it like this because it's Cleator.

70
00:05:24,080 --> 00:05:27,370
Then I have my normal function that of course does not change.

71
00:05:27,380 --> 00:05:31,880
And here we would of course reach out to the database will do so soon.

72
00:05:31,940 --> 00:05:39,410
For now I'll just note that we have to create that in the database and I will just return the response

73
00:05:39,500 --> 00:05:41,890
assuming that we did create the post.

74
00:05:42,020 --> 00:05:49,640
So I'll send back a Jason response and there we might be having a message like posts created successfully

75
00:05:50,210 --> 00:05:52,680
and we sent back some post data.

76
00:05:52,910 --> 00:05:57,340
And now that is at least data I want to parse from the incoming request.

77
00:05:57,560 --> 00:05:59,810
So I expect to get a title lets say.

78
00:06:00,050 --> 00:06:02,360
And I still parsed it on the request body.

79
00:06:02,360 --> 00:06:08,690
So essentially what we always did froths course and then might be extracting a content to also from

80
00:06:08,690 --> 00:06:12,350
request bloddy just what we did for the course.

81
00:06:12,350 --> 00:06:17,820
And here I return to create a post with an idea that was generated automatically let's say.

82
00:06:18,170 --> 00:06:20,650
As long would he be does it for us here.

83
00:06:20,660 --> 00:06:25,820
I'm just doing it with some dummy code and the title which I received and the content and does could

84
00:06:25,820 --> 00:06:29,830
just be the cause of confirmation that it was stored in the database successfully.

85
00:06:29,900 --> 00:06:34,090
Which of course it wasn't thus far but which will add now.

86
00:06:34,220 --> 00:06:38,770
First of all I also want to set a special status code here with the status method.

87
00:06:38,960 --> 00:06:41,290
I want to set it to 200 in one.

88
00:06:41,350 --> 00:06:42,900
The default would be 200.

89
00:06:42,980 --> 00:06:47,720
And this would not be horribly wrong but 201 is the better status code to use.

90
00:06:47,810 --> 00:06:55,140
If you want to tell the client success a resource was created just 200 is just success.

91
00:06:55,200 --> 00:06:58,340
201 also indicates that we created a resource.

92
00:06:58,370 --> 00:07:00,790
And of course we did hear at least in theory.

93
00:07:01,040 --> 00:07:04,050
So manually setting this makes a lot of sense.

94
00:07:04,160 --> 00:07:07,290
With that we're sending this success code.

95
00:07:07,340 --> 00:07:17,250
Now what is missing well a way of parsing that data I did install body parser in an early lecture but

96
00:07:17,250 --> 00:07:18,790
we also need to set it up.

97
00:07:18,870 --> 00:07:25,820
And now here's one important thing you need to remember that we are working with in-coming Jason data.

98
00:07:25,860 --> 00:07:33,630
We expect our clients to communicate with our API with requests that contain J send data just as we

99
00:07:33,630 --> 00:07:40,570
return Jason data Jason data is the data format we want to use both for requests and for responses.

100
00:07:41,010 --> 00:07:44,780
And therefore I will use my body parser of course.

101
00:07:44,850 --> 00:07:46,360
That's why I installed it.

102
00:07:46,560 --> 00:07:49,790
So let's require it here in our Actually yes file.

103
00:07:50,310 --> 00:07:54,740
But when I initialize it I initialize it differently than what we used it for.

104
00:07:54,740 --> 00:08:01,620
And the majority of the course because Dare I initialized it by calling you are L-N coded and configuring

105
00:08:01,620 --> 00:08:02,510
that.

106
00:08:02,580 --> 00:08:11,810
Now this is great for data formats or for requests that hold data in the format of X W W W form you

107
00:08:11,830 --> 00:08:13,150
are encoded.

108
00:08:13,200 --> 00:08:16,340
You might remember we saw that in early Electress too.

109
00:08:16,680 --> 00:08:24,220
Now this is the default data that data has submitted through a form post request.

110
00:08:24,260 --> 00:08:25,450
We don't need that here.

111
00:08:25,460 --> 00:08:28,410
However we don't need form data.

112
00:08:28,430 --> 00:08:30,310
We have no foreign data.

113
00:08:30,320 --> 00:08:37,940
Instead we want to use body parser with the Jason method which is able to parse Jason data from incoming

114
00:08:37,940 --> 00:08:38,650
requests.

115
00:08:38,810 --> 00:08:46,450
So this is good for application Jason as is the official name that you will find in the header.

116
00:08:46,580 --> 00:08:52,070
And this is how the data will be appended to the request that reaches our server.

117
00:08:52,160 --> 00:08:58,370
So we need this middleware to parse incoming Jason data so that we are able to extract it on the body

118
00:08:58,580 --> 00:09:04,360
because that will be added by our body parser does body field on the incoming request.

119
00:09:04,400 --> 00:09:08,550
With that we can extract all that data but how can we now test this.

120
00:09:08,810 --> 00:09:15,530
We can create a form in which we submit because then we would be back to X W W W form you are all encoded

121
00:09:15,530 --> 00:09:21,590
data and it would not be a realistic test because you just don't use forums like this when working with

122
00:09:21,590 --> 00:09:23,330
rest API eyes.

123
00:09:23,330 --> 00:09:29,500
Instead you can use a very handy special tool and that is postman.

124
00:09:29,560 --> 00:09:34,220
Now we will build or work with a real front end very soon.

125
00:09:34,220 --> 00:09:34,940
No worries.

126
00:09:34,940 --> 00:09:42,100
So we'll not be stuck to some helping tool for the rest of the chorus but it's still a very useful API

127
00:09:42,110 --> 00:09:44,360
development tool which you should be aware of.

128
00:09:44,390 --> 00:09:50,390
It's free to use and you can simply google for it to get it from get postman dotcom there or you can

129
00:09:50,390 --> 00:09:53,570
just download postman and walk for the installer.

130
00:09:53,660 --> 00:09:55,220
Again you don't need to pay.

131
00:09:55,220 --> 00:09:56,500
You don't need to sign up.

132
00:09:56,510 --> 00:09:59,420
It might ask you for that but you don't need to.

133
00:09:59,470 --> 00:10:06,020
Once you did load it you end up on a starting page like this you can just close that window and you'll

134
00:10:06,020 --> 00:10:08,990
then end up in a user interface like this one.

135
00:10:08,990 --> 00:10:13,490
Now you can read the official postman docs to learn about all the things you can do but in the end what

136
00:10:13,490 --> 00:10:15,030
you can do is you can enter.

137
00:10:15,050 --> 00:10:21,320
You are all here then choose your different HTP methods and you see more than I showed you but you won't

138
00:10:21,320 --> 00:10:22,790
need most of them.

139
00:10:22,820 --> 00:10:26,000
They're not required for typical crud operations.

140
00:10:26,090 --> 00:10:29,990
So you can choose your method here and then send the request.

141
00:10:30,200 --> 00:10:36,300
You can also add your own headers and you will see the response in the area below this.

142
00:10:36,320 --> 00:10:44,660
So here I can send the request to local host ADHD which is where my notes are reruns on and then feed

143
00:10:44,750 --> 00:10:48,060
slash host.

144
00:10:48,140 --> 00:10:51,770
This should be the route I want to reach disk controller on.

145
00:10:51,830 --> 00:10:54,320
Now for that I first of all need to create the route.

146
00:10:54,560 --> 00:11:06,230
So in my feed routes fall all at post route for Slash post where I used to feed controller create post

147
00:11:06,350 --> 00:11:07,430
action.

148
00:11:07,430 --> 00:11:13,240
So this will be reached through a post request to feed slash post.

149
00:11:13,450 --> 00:11:18,530
Let's configure such a request to your feed slash post as exactly where I'm sending it to.

150
00:11:18,820 --> 00:11:23,220
And now I just need to switch to the post method.

151
00:11:23,260 --> 00:11:28,570
Now with that switched I also need to be able to send some data and you see that the body tab now got

152
00:11:29,290 --> 00:11:36,850
enabled with Get it was disabled because get requests can't hold a body post requests can't hear you

153
00:11:36,850 --> 00:11:40,740
can now choose your format and we don't need any of these.

154
00:11:40,750 --> 00:11:42,190
Instead I'll choose rawe.

155
00:11:42,310 --> 00:11:46,920
And then there in the dropdown Jason application Jason.

156
00:11:47,140 --> 00:11:49,440
So now here we can write some Jason data.

157
00:11:49,540 --> 00:11:55,390
And Jason has a format where you have to sit around in curly braces and then you have key value pairs

158
00:11:55,600 --> 00:12:00,850
where if you're writing it manually the keys have to be wrapped in double quotation marks.

159
00:12:00,850 --> 00:12:03,730
So here we can see what we expect to get.

160
00:12:03,790 --> 00:12:07,360
We expect to get a title and we expect to get a content.

161
00:12:07,420 --> 00:12:10,550
So we want to pass these two fields to our server.

162
00:12:10,810 --> 00:12:15,270
So here we can pass the title and this can be my first post.

163
00:12:17,510 --> 00:12:22,730
We're actually my second post because we use the first one as a dummy post and or get route and then

164
00:12:22,730 --> 00:12:31,390
here we have the content business the content of my first post or my second post of course.

165
00:12:31,430 --> 00:12:34,850
So does this now my request.

166
00:12:34,850 --> 00:12:42,770
We can now click send and we get back a response which looks good because it's the response I find in

167
00:12:42,770 --> 00:12:48,020
my control or action with this message and the post that was created.

168
00:12:48,020 --> 00:12:53,540
And this is now the data we would typically use in our receiving client.

169
00:12:53,540 --> 00:12:59,300
You all see the headers that were sent on the response these were set automatically by express especially

170
00:12:59,300 --> 00:13:06,650
application Jason matters of course and this is now how we can test all our end points because we can't

171
00:13:06,650 --> 00:13:12,620
just enter them here and then switched to HTP methods pass any extra headers or bodies we might need

172
00:13:12,920 --> 00:13:15,700
and therefore we get everything we need to test our API.

173
00:13:15,920 --> 00:13:21,080
Still we will also work with a real Front-End so that we have something beautiful to look at and to

174
00:13:21,080 --> 00:13:22,680
see that in a real app.

175
00:13:22,880 --> 00:13:25,050
But this is a tool you will use a lot.

176
00:13:25,050 --> 00:13:26,030
We're working with rest.

177
00:13:26,030 --> 00:13:26,620
API is.

