1
00:00:02,180 --> 00:00:08,770
I already mentioned at the beginning of this module that for putting dynamic content into our aged female

2
00:00:08,810 --> 00:00:15,020
pages we would use something called templating engines templating engines were like this.

3
00:00:15,020 --> 00:00:18,370
We got to HVM Eish template.

4
00:00:18,380 --> 00:00:25,040
And with that I mean that you typically write some code some file that contains a lot of H Tim L your

5
00:00:25,120 --> 00:00:31,170
HTL structure and mark up your style and Javascript imports all of that is typically loaded.

6
00:00:31,220 --> 00:00:37,130
But you have some blanks in there some placeholders and then you have your note expressed content in

7
00:00:37,130 --> 00:00:41,600
your app like our dummy array our products array we're currently using.

8
00:00:41,960 --> 00:00:48,770
And you've got a templating engine which understands a certain syntax for which it scans your HVM Elish

9
00:00:48,770 --> 00:00:54,670
template and where it then replaces placeholders or certain snippets depending on the engine you're

10
00:00:54,710 --> 00:01:02,420
using with real time the content but def content this time I'll content it uses Stehr is generated on

11
00:01:02,420 --> 00:01:05,890
the fly on the server by the templating engine.

12
00:01:05,990 --> 00:01:08,780
Taking that dynamic content into account.

13
00:01:08,780 --> 00:01:15,620
So for example you could output an ordered list with list items for the data you have in your node express

14
00:01:15,620 --> 00:01:22,430
app with the help of the templating engine and in the end the result will be dynamically on the fly

15
00:01:22,430 --> 00:01:28,870
generated HDMI file which is then sent back to your users so the users never see the template.

16
00:01:28,910 --> 00:01:30,560
They never see the placeholders.

17
00:01:30,740 --> 00:01:32,390
All that happens on the server.

18
00:01:32,390 --> 00:01:38,450
They just get the normal HMO page but it's not hard coded by you as it currently is in our project.

19
00:01:38,450 --> 00:01:41,140
But instead it's generated on the fly.

20
00:01:41,930 --> 00:01:46,760
Now we got a couple of different the whaleboat templating engines and actually you get even more options

21
00:01:46,910 --> 00:01:48,500
then I'll show you here.

22
00:01:48,680 --> 00:01:53,270
At the end of this module you'll find some useful links to dive deeper into them and learn about more

23
00:01:53,270 --> 00:01:55,810
alternatives free options.

24
00:01:55,820 --> 00:01:58,670
I would present you are to free most popular ones.

25
00:01:58,730 --> 00:02:04,430
We've got SJS Pike formerly named Jayde and handlebars.

26
00:02:04,430 --> 00:02:09,860
Now these are free templating engines that use a different syntax and different set of features different

27
00:02:09,860 --> 00:02:18,440
philosophies that you can use to well create these templates inject your dynamic content and get h html

28
00:02:18,440 --> 00:02:19,550
files out of them.

29
00:02:19,820 --> 00:02:23,210
Here's a brief a very brief look at how their syntax looks like.

30
00:02:23,210 --> 00:02:26,900
But I will also present all three of them in this module.

31
00:02:26,930 --> 00:02:28,810
Each of us looks something like this.

32
00:02:28,840 --> 00:02:36,170
You write normal HTL markup but then you also add like is smaller than percentage sign.

33
00:02:36,260 --> 00:02:40,640
And then sometimes an equal sign sometimes not depending on what you're doing you will see that in this

34
00:02:40,640 --> 00:02:43,850
module and then the dynamic continue when output.

35
00:02:43,850 --> 00:02:49,460
So if we had some name variable being injected into our template and you will learn how that injection

36
00:02:49,460 --> 00:02:55,760
works if we got that then the value of our name variable would be output there and we would send back

37
00:02:55,790 --> 00:03:02,990
and watched him fall with a paragraph tags and the value that was stored in name between them POC uses

38
00:03:02,990 --> 00:03:04,310
a different syntax.

39
00:03:04,520 --> 00:03:10,720
It doesn't use real l it replaces does with a minimize to Word or minimal persion.

40
00:03:10,880 --> 00:03:14,570
And then it also allows you to output dynamic content with this syntax.

41
00:03:14,580 --> 00:03:20,720
The hashtag curly brace syntax for example handlebars in turn uses HTL again.

42
00:03:20,790 --> 00:03:25,190
But then you have to double curly brace placeholders for Dynamic Content.

43
00:03:25,320 --> 00:03:32,580
So similar to Ejaz actually handlebars has a bit less features a whaleboat you could say or it it follows

44
00:03:32,580 --> 00:03:36,900
a different philosophy but it's closer to each as Poch ISDE.

45
00:03:37,290 --> 00:03:41,740
Well the outlier here which also uses a different HVM else syntax.

46
00:03:42,030 --> 00:03:47,550
So a short summary would be each asked normal team out and then actually you got these placeholders

47
00:03:47,640 --> 00:03:52,030
which allow you to just use plain javascript in them actually.

48
00:03:52,050 --> 00:03:58,080
So you can also write if statements for loops Poch use as a minimal HTL word.

49
00:03:58,110 --> 00:04:05,250
And a custom template language which is extensible but generally offers only a set of things of operations

50
00:04:05,250 --> 00:04:08,750
you can do but if statements and lists would be included.

51
00:04:08,790 --> 00:04:15,780
Iterations would be included handlebars uses normal HTL but also a custom template language with a limited

52
00:04:15,780 --> 00:04:16,820
set of features.

53
00:04:17,040 --> 00:04:21,700
Again including common things like statements or lists.

54
00:04:21,710 --> 00:04:25,050
So these are free popular templating engines.

55
00:04:25,050 --> 00:04:31,020
Now let's briefly dive into them how we install them and how we use them before we then pick the favorite

56
00:04:31,020 --> 00:04:33,330
for this course and stick to that favorite.

57
00:04:33,390 --> 00:04:37,870
And again at the end of this module you'll find more resources on all these engines.

