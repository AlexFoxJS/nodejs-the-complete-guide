1
00:00:02,470 --> 00:00:08,500
Now there's one thing which I also want to cover in this module and that are the HTP status codes which

2
00:00:08,500 --> 00:00:11,350
codes do we have and why do we use them.

3
00:00:11,440 --> 00:00:13,890
First of all start with what the codes are.

4
00:00:13,930 --> 00:00:19,740
Therefore the codes are simply extra information we passed to the browser which helps the browser understand

5
00:00:19,840 --> 00:00:22,230
if an operation succeeded or not.

6
00:00:22,480 --> 00:00:28,630
If you're writing an application with a lot of client side javascript or a mobile app and you will fetch

7
00:00:28,660 --> 00:00:32,540
only data instead of complete HTML pages something will do the rest.

8
00:00:32,540 --> 00:00:39,100
Marchal later status codes also allow you to understand if an error happened which kind of error because

9
00:00:39,100 --> 00:00:43,540
you typically map certain kinds of arrows to certain kinds of status codes.

10
00:00:43,600 --> 00:00:45,810
For example you have 200 status codes.

11
00:00:45,850 --> 00:00:48,020
Most importantly 200 in 201.

12
00:00:48,040 --> 00:00:50,170
These are all these success status codes.

13
00:00:50,170 --> 00:00:52,790
They indicate that operations simply succeeded.

14
00:00:53,080 --> 00:00:58,960
You have 300 status codes which simply indicates that redirection happened.

15
00:00:58,960 --> 00:01:05,710
You have 400 status codes which show you that something happened because an error was done by the client

16
00:01:06,010 --> 00:01:08,820
for example incorrect data was entered into a form.

17
00:01:08,920 --> 00:01:11,880
Well then we returned to 422 error code.

18
00:01:11,950 --> 00:01:18,280
If you remember correctly and we have five hundred status codes which indicate that a reset arrow occurred.

19
00:01:18,280 --> 00:01:24,910
Now here are some examples you can find a full link with a full list in electrophoresis one for success

20
00:01:24,910 --> 00:01:32,240
cases we have 200 201 the differences that we use 201 typically when we created a resource on the server.

21
00:01:32,240 --> 00:01:38,980
So in a database it's not a must but it's a pattern you can use and you see often 300 like 300 Mohn

22
00:01:39,100 --> 00:01:43,430
simply is a code that is used in combination with redirection to inform us.

23
00:01:43,500 --> 00:01:51,100
However for example this resource move permanently or just a temporary thing whatever the 400 codes

24
00:01:51,580 --> 00:01:57,450
there we have 400 one for not offending that 400 free which you could translate with not all Farai.

25
00:01:57,490 --> 00:02:03,820
So you might be authenticated but you were still not allowed to do that specific operation 404 for a

26
00:02:03,820 --> 00:02:10,680
page that's not found 422 which we often use for invalid input and a couple of error codes and four

27
00:02:10,690 --> 00:02:11,310
five hundred.

28
00:02:11,320 --> 00:02:16,890
The most common one is 500 which indicates Hey that was a service error but you got all the Abo codes

29
00:02:16,900 --> 00:02:21,540
for time out and so on again in the next lecture you find a full list.

30
00:02:21,550 --> 00:02:25,200
Now let's quickly scan for our code if we have a look at our code.

31
00:02:25,210 --> 00:02:26,990
Let's start with the admin controller.

32
00:02:27,220 --> 00:02:29,220
We really set the status code.

33
00:02:29,320 --> 00:02:36,610
The default then always is 200 which is fine for this case but for creating a new product it would be

34
00:02:36,610 --> 00:02:41,550
better if we not just render 422 ventilation fails.

35
00:02:41,590 --> 00:02:46,740
Which is correct but that when we succeed it we all the return 201.

36
00:02:46,810 --> 00:02:50,740
The thing just as if we succeeded we redirect which will use a free hundred code.

37
00:02:50,830 --> 00:02:56,300
But later when we dive into creating a restful API eyes which is a different kind of node app where

38
00:02:56,320 --> 00:03:00,460
we don't return H.T. email but just data there you will see.

39
00:03:00,580 --> 00:03:04,670
Two hundred and one code coming back here it doesn't really make sense.

40
00:03:04,960 --> 00:03:11,960
Now forget that product again we're fine with 200 and we're fine with 200 here.

41
00:03:13,760 --> 00:03:21,660
If we did fetch data and we do load the page and if we try to save or update a product then we get our

42
00:03:21,660 --> 00:03:24,100
validation error with 422.

43
00:03:24,270 --> 00:03:31,590
And if we succeed or in all cases here we redirect which again we'll use free 100 automatically.

44
00:03:31,650 --> 00:03:35,250
So all these codes here are pretty fine pretty decent.

45
00:03:35,250 --> 00:03:41,530
One of the most important things we're in good practice at least is that we do a use for 122 for a validating.

46
00:03:42,000 --> 00:03:50,580
Now we also have is off J.S. where I do redirect when we are trying to do something where I'm not locked

47
00:03:50,580 --> 00:03:51,350
in.

48
00:03:51,360 --> 00:03:59,130
Now again since I'm redirecting I'm sending free status code but of course we could add status 401 here

49
00:03:59,430 --> 00:04:01,800
to kind of also make clear what the problem is.

50
00:04:01,860 --> 00:04:05,600
But it will be overwritten with our free code due to redirect.

51
00:04:05,610 --> 00:04:09,060
So does not make a lot of sense and that is fine here.

52
00:04:09,060 --> 00:04:14,490
Later again would we have a restful API where we don't redirect because we don't route around on the

53
00:04:14,490 --> 00:04:22,590
server then we'll use that 400 code and for that reason that we now most of the time redirect or directly

54
00:04:22,590 --> 00:04:23,610
render a page.

55
00:04:23,730 --> 00:04:26,100
We don't set that many stalest codes here.

56
00:04:26,100 --> 00:04:30,530
We'll see them later again as I mentioned and we see some codes at least awls in error.

57
00:04:30,600 --> 00:04:36,770
As Ray said 400 four and five hundred and does say this Cote's do not mean that our app crashes.

58
00:04:36,780 --> 00:04:38,440
That's important to understand.

59
00:04:38,670 --> 00:04:44,530
Instead if I do enter some invalid Routier I do get page not found.

60
00:04:44,580 --> 00:04:51,960
And if we open the chrome developer tools with the network tab and a reload we see that here this 404

61
00:04:52,020 --> 00:04:53,090
code can be seen.

62
00:04:53,100 --> 00:04:59,520
It's also marked as read because Chrome is intelligent and the text at anything which is not a 200 or

63
00:04:59,520 --> 00:05:04,790
300 code is an error but error does not mean that it crashes.

64
00:05:04,790 --> 00:05:09,790
This still renders a valid page India and we just passed that extra information off.

65
00:05:09,840 --> 00:05:14,470
Hey here's the page but you see that page because something went wrong.

66
00:05:14,820 --> 00:05:16,800
And chrome knows this too.

67
00:05:16,800 --> 00:05:22,980
For example tell us to developer tools and later when we create that restful API I referring to will

68
00:05:23,040 --> 00:05:28,920
also benefit from that because there we do have a more direct interaction with our requests because

69
00:05:28,920 --> 00:05:30,920
we don't render new pages all the time.

70
00:05:31,050 --> 00:05:35,010
And then we can get useful information out of these status codes.

71
00:05:35,130 --> 00:05:39,400
So data as HIV status codes and how they are related with errors.

72
00:05:39,450 --> 00:05:46,090
Your key takeaway is a status code does not mean that the request failed or that the app crashed.

73
00:05:46,110 --> 00:05:51,480
We had some problem and now we're returning information with the problem to the client.

74
00:05:51,570 --> 00:05:55,370
And that is also a way of gracefully handling errors.

