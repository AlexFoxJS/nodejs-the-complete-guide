1
00:00:02,350 --> 00:00:10,840
Let's start an app genius there I have some code where I do get my user out of a session and then I

2
00:00:10,840 --> 00:00:16,130
find to user by a DNA database and then I store to found user in my request object.

3
00:00:16,160 --> 00:00:19,250
So that for the entire request I can access that user object.

4
00:00:19,270 --> 00:00:22,090
It's a mongoose user object and it is a catch.

5
00:00:22,090 --> 00:00:27,880
Any potential errors that might be happening again because it's really important does catch block will

6
00:00:27,880 --> 00:00:31,000
not fire if I don't find a user with this ID.

7
00:00:31,230 --> 00:00:36,730
It will only fire if there are any technical issues you could say if the database is down or if the

8
00:00:36,730 --> 00:00:40,630
user does app does not have sufficient permissions to execute this action.

9
00:00:41,930 --> 00:00:45,790
Now we kind of have our own error handling in place.

10
00:00:45,850 --> 00:00:51,040
And again we're not working with technical error object here but here I am checking whether we do have

11
00:00:51,040 --> 00:00:52,140
a session user.

12
00:00:52,240 --> 00:00:57,520
And I do have a solution for the case that this is not the case because if it would not at this check

13
00:00:57,850 --> 00:01:03,460
then they could try to find a user without the session object existing and that would then crash our

14
00:01:03,460 --> 00:01:03,890
app.

15
00:01:03,910 --> 00:01:10,600
So it makes sense to write clever code that a wide set scenarios and tries to only execute code that

16
00:01:10,600 --> 00:01:12,010
will succeed.

17
00:01:12,520 --> 00:01:14,350
It might of course still fail.

18
00:01:14,350 --> 00:01:19,390
And for some reason we might still not find that user even if we have it stored in a session.

19
00:01:19,570 --> 00:01:23,150
Maybe because the user was deleted in a database in between.

20
00:01:23,170 --> 00:01:27,870
So what makes sense to us is a check for the existence of user or for the opposite.

21
00:01:27,870 --> 00:01:34,360
So if user does not exist and if it does not exist here we could also return next without storing the

22
00:01:34,360 --> 00:01:35,630
request user.

23
00:01:35,650 --> 00:01:41,920
So just that we are super safe that we don't store some undefined object in the User object but that

24
00:01:41,950 --> 00:01:50,140
we continue without the user instead if we can find to user here in the catch block logging it is not

25
00:01:50,140 --> 00:01:57,850
really useful though it will make more sense to fro a new error here where we simply wrapped the error

26
00:01:57,910 --> 00:01:59,340
object we get here.

27
00:01:59,740 --> 00:02:05,630
Throwing this error has a significant advantage which I will show you in a second.

28
00:02:05,920 --> 00:02:07,990
But with that does looks good.

29
00:02:07,990 --> 00:02:13,870
We added the extra check and if we do have some technical issue we fro a real error.

30
00:02:13,870 --> 00:02:19,020
And as it turns out Express us gives us a way of taking care of such errors.

31
00:02:19,030 --> 00:02:20,830
That is why I'm doing it like this.

32
00:02:20,830 --> 00:02:29,860
Alternatively we could of course also simply call next year to continue without request user being set

33
00:02:30,190 --> 00:02:31,280
or anything like that.

34
00:02:31,390 --> 00:02:36,160
But I want to throw an error because we had a technical issue connecting to our database and that is

35
00:02:36,160 --> 00:02:40,410
something that might be a bigger problem than just a non-existing user.

