1
00:00:02,300 --> 00:00:06,300
Time to work on our product model again in there we get a safe method.

2
00:00:06,320 --> 00:00:08,880
And right now we used it to create a new product.

3
00:00:09,320 --> 00:00:15,080
Now why don't we all use that for updating an existing product if we already have it.

4
00:00:16,700 --> 00:00:23,920
DUDAS what we'll have to do is in safe we just have to check if we already have an ID and therefore

5
00:00:23,920 --> 00:00:31,270
when creating a new product we should accept an idea or two and then said this ID equal to ID but will

6
00:00:31,270 --> 00:00:37,090
simply pass Nahlah here for a brand new product so that we can still create products that don't have

7
00:00:37,090 --> 00:00:39,780
an ID yet then the ID will be assigned here.

8
00:00:40,000 --> 00:00:47,050
But if I were editing one we do have the ID already so we can simply assign it here and then and save

9
00:00:47,080 --> 00:00:53,410
we can simply check if this ID is already existing IF it now does will fail and will automatically make

10
00:00:53,410 --> 00:00:55,870
it to the next line which we want.

11
00:00:56,080 --> 00:01:02,620
But if we do have it Id save should not create a new idea and new product instead it should simply update

12
00:01:02,620 --> 00:01:07,980
the existing one will still have to get all the products though.

13
00:01:08,020 --> 00:01:14,950
So indeed this should be moved into our callback because we need all the products anyways and a new

14
00:01:15,070 --> 00:01:19,350
idea creation can also move in there but offer this if statement.

15
00:01:19,360 --> 00:01:25,240
Now in his statement I know want to update the existing product and for that I need to find it first

16
00:01:25,760 --> 00:01:34,450
so find my existing product index again by searching for or going through all my products with the find

17
00:01:34,780 --> 00:01:36,080
index method.

18
00:01:37,450 --> 00:01:43,900
Products will be an array as we know and there I will get access to all my products stored in the temporary

19
00:01:43,900 --> 00:01:49,960
Prod. argument here or in the argument of this anonymous function I should say and I can simply check

20
00:01:50,020 --> 00:01:56,640
if the idea of the product I'm looking at in this array is equal to this Id put in other words if I'm

21
00:01:56,650 --> 00:01:58,250
now looking at the product.

22
00:01:58,390 --> 00:02:00,000
I plan on editing.

23
00:02:00,430 --> 00:02:05,920
If that's the case then I found the index of the product I want to edit and now I simply have to replace

24
00:02:05,920 --> 00:02:07,760
that in that product's array.

25
00:02:08,970 --> 00:02:09,750
Sole trader.

26
00:02:09,780 --> 00:02:17,610
Updated products aere where I used that spread operator again to pull out all the existing product elements

27
00:02:17,760 --> 00:02:25,470
store them in a new array and then on that aere update products I'll replace my existing product index

28
00:02:25,740 --> 00:02:28,150
with this because of this.

29
00:02:28,230 --> 00:02:35,610
Inside of this class year is of course the updated product because you have to imagine that I create

30
00:02:35,610 --> 00:02:43,770
a new product instance I will populated with information about my existing product and then I just call

31
00:02:43,770 --> 00:02:49,500
safe and that we'll find out that I already have this product and therefore I just place it in the array

32
00:02:49,500 --> 00:02:54,490
which is stored in the file with the newly created product I'm in.

33
00:02:54,870 --> 00:02:59,550
So with debt being saved I just have to write that information to the file.

34
00:02:59,760 --> 00:03:02,470
So as right fall is what I need to execute.

35
00:03:02,670 --> 00:03:04,800
So this code will stay the same.

36
00:03:04,950 --> 00:03:12,780
Just that I need to call it on updated products here and I will now also wrap the repartitioned the

37
00:03:12,780 --> 00:03:17,690
else block so that not both snippets execute but only one of them.

38
00:03:17,700 --> 00:03:23,150
So now we're storing the updated products and right file will always replace all the old content.

39
00:03:23,190 --> 00:03:25,320
So we won't added or anything like that.

40
00:03:25,350 --> 00:03:26,500
It will replace it.

41
00:03:26,910 --> 00:03:32,610
And therefore we should now have a safe function that we can use both for adding new products or editing

42
00:03:32,700 --> 00:03:34,680
existing products.

43
00:03:34,680 --> 00:03:36,600
Now it is as one important implication.

44
00:03:36,600 --> 00:03:43,490
We now need to go to the controller and when adding a new product here in post ad product we now also

45
00:03:43,500 --> 00:03:50,850
need to set now as an idea as a first argument to your on our product constructor because we just added

46
00:03:50,850 --> 00:03:54,470
this as an additional argument here in the constructor.

47
00:03:54,690 --> 00:04:01,020
And if it is null then this check will fail and we will therefore make it into the new product created

48
00:04:01,020 --> 00:04:02,510
mode which is what we want.

49
00:04:03,840 --> 00:04:09,410
We now can also work on the post add edit product method there.

50
00:04:09,510 --> 00:04:11,090
I need to do two things.

51
00:04:11,130 --> 00:04:17,280
First of all I need to fetch information for the product then I need to create a new product instance

52
00:04:17,400 --> 00:04:22,220
and populated with that information and then I need to call it safe.

53
00:04:22,290 --> 00:04:29,660
That's first of all extract the product ID fraud ID by accessing the request and their essence is a

54
00:04:29,660 --> 00:04:30,660
post request.

55
00:04:30,750 --> 00:04:33,630
I expect to get that information that requests body.

56
00:04:33,900 --> 00:04:36,480
However at the moment this will not happen.

57
00:04:36,810 --> 00:04:40,590
So let's go to the view first to the edit product Ejaz file.

58
00:04:40,920 --> 00:04:45,660
And there I need to add a new hidden input which stores the existing product ID.

59
00:04:45,960 --> 00:04:51,240
However data is only an option if I'm editing a product not if I'm adding one.

60
00:04:51,240 --> 00:04:59,470
So first of all I'll use it as to again check if I am editing and also close that's your we all need

61
00:04:59,470 --> 00:05:02,540
to open a curly brace therefore.

62
00:05:02,760 --> 00:05:09,450
And if I am editing and only in this case all render a new input here which is hidden so wished which

63
00:05:09,450 --> 00:05:15,770
the user can see where the value is now my product ID.

64
00:05:15,940 --> 00:05:21,660
So I'm using Ejaz to output the product ID there and this will now therefore be included in the form.

65
00:05:21,660 --> 00:05:25,070
Now I just need to give it a name product ID maybe.

66
00:05:25,170 --> 00:05:33,770
And now I can extract that Piedad name into incoming request in my controller so request body product

67
00:05:33,800 --> 00:05:40,710
ID because of a used product ID as a name here in the view on the hidden input.

68
00:05:40,730 --> 00:05:47,450
Now with that Id fetched I could fetch my product through the product model but actually does this he

69
00:05:47,450 --> 00:05:47,780
added.

70
00:05:47,790 --> 00:05:48,360
All right.

71
00:05:48,410 --> 00:05:54,560
So I get the new values I want to store as part of my post request body because the user enters them

72
00:05:54,560 --> 00:05:55,550
here in the form

73
00:05:58,460 --> 00:05:59,010
here.

74
00:05:59,210 --> 00:06:08,060
All this is sent to me so I will now simply store all that in values are in constants like my updated

75
00:06:08,240 --> 00:06:17,150
title will be request bodies Heidel I'll have my updated price which is request body price.

76
00:06:17,300 --> 00:06:20,120
I'll have my updated image.

77
00:06:20,120 --> 00:06:25,360
You are out and you can name these Constans however you want NOW and or of course is what you access

78
00:06:25,360 --> 00:06:26,930
your on the request body.

79
00:06:26,930 --> 00:06:34,680
These keys have to match the names you have on your inputs in your well added product view.

80
00:06:34,730 --> 00:06:41,390
Last but not least we got the updated description here which is request Wadih description and now with

81
00:06:41,390 --> 00:06:44,990
all that data I can create an updated product.

82
00:06:45,010 --> 00:06:51,760
This name is all up to you instantiate a new product therefore And here I do pass my existing ideas

83
00:06:51,760 --> 00:06:55,770
to a first argument and this will ensure that in the product model.

84
00:06:55,860 --> 00:07:01,720
In this check here we do find a valid ID and therefore we go into this updating mode instead of the

85
00:07:02,420 --> 00:07:11,610
Add mode so old has to add ID at all past my updated title then I'll then also pass my updated image

86
00:07:11,620 --> 00:07:12,440
you are l.

87
00:07:12,550 --> 00:07:17,060
I'll pass my updated description and my updated price.

88
00:07:17,320 --> 00:07:18,560
So this is what I pass.

89
00:07:18,730 --> 00:07:26,970
And now thanks to our changes to the product model I can update updated product save and it should hopefully

90
00:07:26,970 --> 00:07:30,880
just save that and override the existing one.

91
00:07:32,440 --> 00:07:33,740
Now let's try this out.

92
00:07:33,790 --> 00:07:36,550
And for that let's go to our advantage as routes.

93
00:07:36,580 --> 00:07:44,290
First of all and registered as newly added post added product action on the Edit product post route

94
00:07:45,220 --> 00:07:50,810
and now let's reload our page here and add a couple of exclamation marks and hit up that product.

95
00:07:51,220 --> 00:07:54,720
And the problem is I never send a response so this failed.

96
00:07:54,850 --> 00:08:01,660
But if we have a look at our product Jason File the first product didn't change but the second one indeed

97
00:08:01,660 --> 00:08:03,490
has all the exclamation marks.

98
00:08:03,490 --> 00:08:05,140
So this does work.

99
00:08:05,230 --> 00:08:08,580
So the missing thing just is that we send the response in our controller.

100
00:08:08,800 --> 00:08:18,010
So here after calling save I will actually call wrests redirect and go back to just slash admin.

101
00:08:18,040 --> 00:08:21,690
Or let's have a quick look at the admin J.S routes.

102
00:08:21,770 --> 00:08:25,310
I want to go to slash products so slash admin slash product.

103
00:08:25,310 --> 00:08:27,670
I mean this is what I want to redirect to.

104
00:08:28,010 --> 00:08:29,330
So let's save this

105
00:08:32,230 --> 00:08:33,160
go back and reload.

106
00:08:33,160 --> 00:08:35,020
Here we see the estimation marks too.

107
00:08:35,020 --> 00:08:42,800
Let's change the price to 30 Daut 95 and also change the description.

108
00:08:42,800 --> 00:08:43,940
It's really great.

109
00:08:43,940 --> 00:08:49,400
Update the product we are redirected and we can already see the changes here and we can edit it again

110
00:08:49,400 --> 00:08:49,820
of course.

111
00:08:49,820 --> 00:08:52,820
For example remove the estimation marks.

112
00:08:52,820 --> 00:08:53,840
So this is working.

113
00:08:53,840 --> 00:08:56,000
We're now able to edit the product.

