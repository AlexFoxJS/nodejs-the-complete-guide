1
00:00:02,400 --> 00:00:09,930
Now we got a running application now that is how we deploy our application to Hiroko Heroku is just

2
00:00:09,930 --> 00:00:11,980
one possible hosting provider.

3
00:00:12,000 --> 00:00:14,570
So definitely explore alternatives.

4
00:00:14,610 --> 00:00:20,610
Check out the documentation for your favorite hosting provider to learn the exact steps on how to get

5
00:00:20,610 --> 00:00:24,810
your code onto it and which additional configuration you might need to do.

6
00:00:24,870 --> 00:00:30,650
That always differs a bit but it never differs that you need to get your code onto that server there

7
00:00:30,720 --> 00:00:35,450
and spin up your notes server and pass your environment variables that is always the same.

8
00:00:35,490 --> 00:00:38,910
So check out the docs for your favorite hosting provider.

9
00:00:39,180 --> 00:00:42,270
Now this of course was our shop application.

10
00:00:42,270 --> 00:00:46,190
It was not the rest API and not digraph API.

11
00:00:46,500 --> 00:00:54,000
But there I will not show you specific deployment videos because actually deploying these does not differ

12
00:00:54,350 --> 00:00:54,800
there.

13
00:00:54,930 --> 00:01:00,600
We still have a normal node server write a note express application so we can deploy it in exactly the

14
00:01:00,600 --> 00:01:01,430
same way.

15
00:01:01,680 --> 00:01:05,940
The only thing that will differ is that we can't really click Open app. anymore.

16
00:01:06,030 --> 00:01:11,780
Well we can but then on the starting page will not see much because there are no service side rendered

17
00:01:11,800 --> 00:01:12,480
views.

18
00:01:12,720 --> 00:01:19,920
Instead we have the API running where we can send requests to and will then be our front end application

19
00:01:20,040 --> 00:01:23,730
or our mobile application where we have to adjust.

20
00:01:23,890 --> 00:01:30,780
You are able to send the request to our now running hosted application and not to localhost anymore.

21
00:01:31,350 --> 00:01:38,400
So there in your application you'll have to exchange your you or else your and use your hosted domain

22
00:01:38,550 --> 00:01:39,940
and not localhost.

23
00:01:39,960 --> 00:01:41,420
But that is the only thing.

24
00:01:41,550 --> 00:01:46,710
And then the front end app or the mobile app is deployed differently anyways.

25
00:01:46,860 --> 00:01:53,730
A mobile app is sent to your users for the app stores as a front end application as this one built with

26
00:01:53,730 --> 00:02:00,600
re-act typically is deployed as a static web application and that is something you can learn in my re-act

27
00:02:00,630 --> 00:02:02,430
angular and so on courses.

28
00:02:02,610 --> 00:02:08,820
You simply built this project with the build script you can find in package Chaisson in this case it

29
00:02:08,820 --> 00:02:15,990
would be NPM run build and this will then spit out a new folder with all their built and optimized code

30
00:02:16,380 --> 00:02:17,210
and more on that.

31
00:02:17,250 --> 00:02:22,890
In respect of courses on these frameworks why it is required and so on you learn all about that there.

32
00:02:23,160 --> 00:02:24,650
And then you would take that code.

33
00:02:24,660 --> 00:02:31,890
In this case in the build folder and shipped that to a static web post like for example AWOS as free

34
00:02:32,250 --> 00:02:38,190
and then serve your app on a totally different server then your node application is running on because

35
00:02:38,190 --> 00:02:45,450
as you learn many times in this course there is no strong relation between your node API and your Front-End

36
00:02:45,540 --> 00:02:47,610
mobile app whatever it is.

37
00:02:47,610 --> 00:02:49,560
So that is how you would deploy that.

