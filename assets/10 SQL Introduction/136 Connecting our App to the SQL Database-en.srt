1
00:00:02,490 --> 00:00:08,640
To use sequel or to interact with sequel from inside note we need to install a new package and we do

2
00:00:08,640 --> 00:00:15,420
that with NPM install of course and install and we simply bring that up to make it easier to read and

3
00:00:15,600 --> 00:00:21,510
install dash dash safe because it will be a production dependency one which is a crucial part of our

4
00:00:21,510 --> 00:00:22,830
application.

5
00:00:22,870 --> 00:00:28,560
The name is my sequel to this is simply a later version of well my sequel.

6
00:00:28,650 --> 00:00:35,310
One as you might guess and it allows us to write sequel code and execute sequel code in note and interact

7
00:00:35,310 --> 00:00:37,230
with a database.

8
00:00:37,230 --> 00:00:43,900
Now with that installed we made one important step forward towards using my sequel.

9
00:00:44,310 --> 00:00:52,110
The next step is that we need to connect to our database from inside our application and for debt I

10
00:00:52,110 --> 00:00:57,600
will close my views here and go to the utl folder we created in the past.

11
00:00:57,730 --> 00:01:02,790
There we have that Pop-Tart genius following there which we don't really use anymore but we can also

12
00:01:02,790 --> 00:01:05,290
create a new file in your database.

13
00:01:05,340 --> 00:01:09,270
James Hall and the name is totally up to you by the way in there.

14
00:01:09,270 --> 00:01:15,300
I want to set up the code that will allow us to connect to the sequel database and then also give us

15
00:01:15,300 --> 00:01:21,420
back a connection object so to say which allows us to run queries for this all.

16
00:01:21,450 --> 00:01:26,840
First of all import dad my sequel package and store it in my sequel constant.

17
00:01:27,030 --> 00:01:33,720
So require my sequel to is to command and eat here and now there are two ways of connecting with a sequel

18
00:01:33,720 --> 00:01:34,810
database.

19
00:01:34,860 --> 00:01:41,970
One is that we set up one connection which we can then use to run queries and we should always close

20
00:01:41,970 --> 00:01:44,250
the connection once we're done with a query.

21
00:01:44,250 --> 00:01:50,630
The downside is that we need to re execute the code to create the current action for every new query

22
00:01:50,850 --> 00:01:57,310
and there will be a lot of queries because we fetch data we write data we delete data creating connections

23
00:01:57,310 --> 00:02:02,830
all the time quickly becomes very inefficient both in our code and also regarding the connection to

24
00:02:02,830 --> 00:02:07,670
the database which is established and the performance may cost.

25
00:02:08,050 --> 00:02:13,360
So a better way is to create a so-called connection pool and by the way you can learn way more about

26
00:02:13,360 --> 00:02:14,140
this package.

27
00:02:14,140 --> 00:02:17,150
It's options regarding how to set up connections and so on.

28
00:02:17,260 --> 00:02:22,720
In the officials box for this tool for this package and you find a link to those docs in the last lecture

29
00:02:22,720 --> 00:02:24,050
office module.

30
00:02:24,220 --> 00:02:27,210
So to set up such a pool I'll create a new constant pool.

31
00:02:27,220 --> 00:02:30,610
The name is up to you and I'll use that mystical object in there.

32
00:02:30,610 --> 00:02:37,150
I will call create pool and there you all to see that create connection we could use now I don't want

33
00:02:37,150 --> 00:02:42,850
a single connection but a pool of connections which will allow us to always reach out to it whenever

34
00:02:42,850 --> 00:02:48,550
we have a query to run and then we get a new connection from that pool which manages multiple connections

35
00:02:48,640 --> 00:02:54,040
so that we can run multiple queries simultaneously because each car needs its own connection and once

36
00:02:54,040 --> 00:02:59,530
to Curdistan to connect will be handed back into the pool and it's a whaleboat again for a new query

37
00:02:59,830 --> 00:03:04,440
and the pool can then be finished when our application shuts down.

38
00:03:04,600 --> 00:03:10,180
So I will call create pool here and need to pass in a javascript object with some information about

39
00:03:10,210 --> 00:03:11,830
our database engine.

40
00:03:11,830 --> 00:03:18,520
Our database HOST We're connecting to forget all first of all to find a host so the server IP address

41
00:03:18,520 --> 00:03:23,180
or name and that is localhost because it's running on our local machine here.

42
00:03:23,350 --> 00:03:29,140
Then I need to find a username and that by default is a route that was given to us using the configuration

43
00:03:29,140 --> 00:03:30,850
process.

44
00:03:30,850 --> 00:03:37,480
I also need to find Dick secte database name because this gives us access to a database server but that

45
00:03:37,480 --> 00:03:43,150
server typically has multiple databases and here our databases are our schema.

46
00:03:43,240 --> 00:03:50,870
So we'll take the node complete database here so that the value here sublease node complete now with

47
00:03:50,900 --> 00:03:56,210
that we simply have to enter one more piece of information and that is of course our password.

48
00:03:56,210 --> 00:04:00,620
So here enter a password and then I used this password.

49
00:04:00,620 --> 00:04:04,770
You should of course use the password you assigned during installation.

50
00:04:04,790 --> 00:04:06,030
This will create a pool.

51
00:04:06,200 --> 00:04:13,970
And now I can export this pool and it will export it in a special way actually a little called Promise

52
00:04:13,970 --> 00:04:19,910
here because this will allow us to use prominences when working with these connections which of course

53
00:04:19,910 --> 00:04:26,300
handle asynchronous tasks asynchronous data instead of callbacks because promises allow us to write

54
00:04:26,330 --> 00:04:28,330
code in a bit more structured way.

55
00:04:28,370 --> 00:04:31,240
We don't have many nested callbacks.

56
00:04:31,250 --> 00:04:37,030
Instead we can use promised chains and you will see what I mean in this module of course.

57
00:04:37,070 --> 00:04:42,530
So now we can always import from the database just fall to get access to that pool and to the connections

58
00:04:42,530 --> 00:04:43,360
in there.

59
00:04:43,910 --> 00:04:50,240
And I can show this as an example by simply going to actually yes which will of course run when our

60
00:04:50,240 --> 00:04:58,760
application starts up and there let's simply import database may be stored in a constant named DBI by

61
00:04:58,760 --> 00:05:04,330
requiring util database like this.

62
00:05:04,730 --> 00:05:07,440
So reaching out to that new database file would just create it.

63
00:05:07,510 --> 00:05:11,150
This will then be the pool basically or.

64
00:05:11,560 --> 00:05:14,770
Well the pool which allows us to use a connection in it.

65
00:05:15,250 --> 00:05:21,250
And if I now use this let's say here I can run D-B.

66
00:05:21,390 --> 00:05:27,990
And now we got a couple of methods one of them is execute which allows us to execute queries.

67
00:05:28,010 --> 00:05:30,630
We also got a query but execute is a bit safer.

68
00:05:30,920 --> 00:05:32,510
So we'll use that.

69
00:05:32,720 --> 00:05:37,910
We can also end it and we want to end it whenever our application is to shut down.

70
00:05:38,360 --> 00:05:41,030
But we don't shut our application down.

71
00:05:41,030 --> 00:05:42,060
In this case here.

72
00:05:42,140 --> 00:05:43,990
So no need to call and here.

73
00:05:44,060 --> 00:05:51,530
Instead we just want to connect or execute a command and we can execute a command here by writing sequel

74
00:05:51,590 --> 00:05:53,810
syntax as a string.

75
00:05:53,810 --> 00:05:59,820
Now of course that means you need to know sequel and I will teach you a very basic sequel here in this

76
00:05:59,820 --> 00:06:07,340
course if you plan on using my sequel together with your node app you definitely have to take a sequel

77
00:06:07,340 --> 00:06:13,490
course which ties into all the deaths of the sequel language because that is far beyond the scope of

78
00:06:13,490 --> 00:06:18,560
this course which is of course a node course and not a sequel of course but what we could do here is

79
00:06:18,920 --> 00:06:23,850
we could select everything from products.

80
00:06:23,970 --> 00:06:26,420
And of course we have no products table yet.

81
00:06:26,490 --> 00:06:32,710
So let's quickly go back to our work bench and your on tables right click and click create table.

82
00:06:33,090 --> 00:06:35,160
And this gives you Daudi table editor.

83
00:06:35,370 --> 00:06:40,040
The name should now be products and then there you can add new fields.

84
00:06:40,050 --> 00:06:42,960
Remember that schema thing you add fields.

85
00:06:42,960 --> 00:06:47,640
So let's work on this and finished this and execute our first little code in the next lecture.

