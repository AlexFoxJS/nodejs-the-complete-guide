1
00:00:02,360 --> 00:00:08,400
So we're executing a Kouri year with execute on our pool on the products table we just created and they

2
00:00:08,400 --> 00:00:15,910
edit then and catch these are functions we can chain onto the result of the execute call.

3
00:00:15,930 --> 00:00:21,540
So they will execute on whatever disk gives us back and does whatever is some so-called promise.

4
00:00:21,540 --> 00:00:26,340
Now a promise is basic javascript object not specific to node.

5
00:00:26,340 --> 00:00:32,790
It's also salable in Javascript in the browser which allows us to work with asynchronous code instead

6
00:00:32,790 --> 00:00:39,600
of using callbacks which we could also use to my sequel package promises allow us to write more structured

7
00:00:39,600 --> 00:00:45,930
code because instead of having a nested anonymous function here as a second argument we simply have

8
00:00:46,360 --> 00:00:50,970
then block which will then get the anonymous function to execute.

9
00:00:50,970 --> 00:00:52,070
Now the advantages.

10
00:00:52,080 --> 00:00:53,660
We can also write it like this.

11
00:00:53,700 --> 00:00:55,480
And now we have very readable code.

12
00:00:55,590 --> 00:01:00,960
Instead of having a nested code here and that nested code especially becomes a problem if we have more

13
00:01:01,050 --> 00:01:04,830
and more asynchronous tasks depending on each other.

14
00:01:04,860 --> 00:01:10,530
Now we all don't just have then we all have catch and there's as a function which executes in case of

15
00:01:10,530 --> 00:01:11,520
an error.

16
00:01:11,520 --> 00:01:17,940
So for example if the database connection fails or something like this we get the error or object here.

17
00:01:18,090 --> 00:01:23,170
And this is just a modern javascript syntax where we get one argument and then we handle it here.

18
00:01:23,370 --> 00:01:28,410
And I can simply log it with the console so that we at least see what the error was.

19
00:01:28,410 --> 00:01:33,850
Now we hopefully end up here and we probably get an argument here too.

20
00:01:34,020 --> 00:01:35,530
Let's name it resoled for now.

21
00:01:35,610 --> 00:01:38,250
And it's all a log saltier then.

22
00:01:38,550 --> 00:01:40,160
And now let's see what we get.

23
00:01:40,290 --> 00:01:46,440
If I run NPM start to bring up that server again this immediately executes because it's part of the

24
00:01:46,440 --> 00:01:47,820
Rapturists file.

25
00:01:47,820 --> 00:01:54,370
And if we have a look at this we see you Optik we got back and this object we essentially all is a seeded

26
00:01:54,390 --> 00:01:57,250
data that was retrieved here.

27
00:01:58,180 --> 00:02:05,080
Data we do get back hasn't format of an array with a nested array where the first nested array seems

28
00:02:05,080 --> 00:02:13,270
to depict our data the rows it fetched anti-Second array seems to hold some meta data about the table

29
00:02:13,270 --> 00:02:14,950
we fetched it from.

30
00:02:14,950 --> 00:02:18,060
So result basically is that array with two nested elements.

31
00:02:18,160 --> 00:02:25,900
So we can also log out results 0 and resolved one here and if we now save this and for our server restarts

32
00:02:27,780 --> 00:02:29,360
we have almost the same output.

33
00:02:29,460 --> 00:02:37,210
But now it's not a nested array but here we have the first object we retrieved the row we got.

34
00:02:37,410 --> 00:02:38,800
And then this ends here.

35
00:02:38,800 --> 00:02:42,350
Here is the closing square bracket and then here we get the second lock.

36
00:02:42,390 --> 00:02:45,460
So does this result one which with the metadata.

37
00:02:45,720 --> 00:02:49,010
This is what we get back in addition allow us to work with our data.

38
00:02:49,020 --> 00:02:54,840
Now obviously we don't just want to work with dummy data but let's now see how we can adjust our models

39
00:02:54,840 --> 00:02:58,340
to interact with our database instead of local files.

