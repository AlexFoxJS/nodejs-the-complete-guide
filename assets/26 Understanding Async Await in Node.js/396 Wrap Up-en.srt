1
00:00:02,210 --> 00:00:04,720
So we are using async await everywhere now.

2
00:00:04,850 --> 00:00:10,520
And there's one important thing I want to highlight here for all these Mangu is operations which is

3
00:00:10,520 --> 00:00:17,270
the primary thing where we use a single weight you have to understand that Mangu is actually with operations

4
00:00:17,270 --> 00:00:23,900
like Count documents or find does not return a real promise but a promise like object where you can

5
00:00:23,900 --> 00:00:29,840
use then and catch and also a sick wait that is supported by mongooses even though behind the scenes

6
00:00:29,840 --> 00:00:31,990
it's not a real promise.

7
00:00:32,060 --> 00:00:37,220
Doesn't matter too much for you to be honest because you use a sink and a weight and exactly the same

8
00:00:37,220 --> 00:00:39,800
way you would use it on a real promise.

9
00:00:39,800 --> 00:00:42,890
But I also don't want to hide that fact from you.

10
00:00:42,950 --> 00:00:45,820
You could use a real promise by changing access.

11
00:00:45,980 --> 00:00:51,550
After all these mongooses operations software find ofter count documents.

12
00:00:51,740 --> 00:00:54,860
If you do that then you get back a real promise.

13
00:00:54,860 --> 00:01:00,890
We don't need that year because while that promise like object behaves in exactly the way we want you

14
00:01:00,890 --> 00:01:07,220
do have the real promise with the beach trip library though when we have our password here we get a

15
00:01:07,220 --> 00:01:08,300
real promise.

16
00:01:08,360 --> 00:01:13,350
And as you can see well you'll see nothing you see no difference in the way we use a wait.

17
00:01:13,400 --> 00:01:15,100
And you also had no difference.

18
00:01:15,170 --> 00:01:17,480
You previously used then and catch.

19
00:01:17,600 --> 00:01:20,800
So that is what I mean you don't need to care too much about that.

20
00:01:20,810 --> 00:01:22,860
I still did want to mention it.

21
00:01:23,180 --> 00:01:29,880
More importantly I want you to take away that a single weight is a nice alternative to using it then

22
00:01:30,080 --> 00:01:33,470
and catch it's not better it's not faster.

23
00:01:33,470 --> 00:01:36,260
Behind the scenes it's basically the same code.

24
00:01:36,320 --> 00:01:43,940
It can be more readable to you but you must never forget that this still are asynchronous steps.

25
00:01:44,120 --> 00:01:48,730
The javascript code execution behavior doesn't change because of that.

26
00:01:49,010 --> 00:01:51,680
It does not block execution.

27
00:01:51,680 --> 00:01:56,590
It simply wraps all the code off-Terra in a wait statement in the Zenn block.

28
00:01:56,600 --> 00:01:58,190
You would have to write otherwise.

29
00:01:58,310 --> 00:02:01,540
So this runs inside of the implicit then block.

30
00:02:01,550 --> 00:02:03,140
This statement creates.

31
00:02:03,200 --> 00:02:05,050
This is how you have to think about that.

32
00:02:05,060 --> 00:02:11,270
So never forget the Ds are asynchronous operations because that is really important to understand.

33
00:02:11,810 --> 00:02:15,770
And you can absolutely go with the then and catch lock were used before.

34
00:02:15,830 --> 00:02:23,720
So with the old promise style if you prefer it I like it for teaching because it's clearer that we have

35
00:02:23,720 --> 00:02:30,680
some operation to to wait for and that the line offered that would execute first here does is less clear.

36
00:02:30,830 --> 00:02:37,490
But if you are aware of how async code works this can simply be a nicer syntax to look at and it's up

37
00:02:37,490 --> 00:02:41,180
to you which syntax you'll use for the rest of the course.

38
00:02:41,180 --> 00:02:43,860
I'll write new promises or I'll stick to that.

39
00:02:43,920 --> 00:02:49,070
In a way it's index for my node application for do you react application.

40
00:02:49,070 --> 00:02:52,680
I'll leave the code as it is with then and catch.

41
00:02:52,760 --> 00:02:55,010
You could use azing in a way there too.

42
00:02:55,040 --> 00:03:00,980
But again this is no re-act course so I will leave it there as it is for node will go with async await.

